"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[6821],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,p=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,k=d["".concat(l,".").concat(m)]||d[m]||i[m]||p;return n?r.createElement(k,c(c({ref:t},u),{},{components:n})):r.createElement(k,c({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=n.length,c=new Array(p);c[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var s=2;s<p;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},771:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),p=(n(7294),n(3905)),c=["components"],o={sidebar_label:"interface",title:"addons.tune.interface"},l=void 0,s={unversionedId:"reference/addons/tune/interface",id:"reference/addons/tune/interface",isDocsHomePage:!1,title:"addons.tune.interface",description:"Handles the base interface",source:"@site/docs/reference/addons/tune/interface.md",sourceDirName:"reference/addons/tune",slug:"/reference/addons/tune/interface",permalink:"/reference/addons/tune/interface",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/addons/tune/interface.md",tags:[],version:"current",frontMatter:{sidebar_label:"interface",title:"addons.tune.interface"},sidebar:"api",previous:{title:"config",permalink:"/reference/addons/tune/config"},next:{title:"optuna",permalink:"/reference/addons/tune/optuna"}},u=[{value:"BaseInterface Objects",id:"baseinterface-objects",children:[]}],i={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,c);return(0,p.kt)("wrapper",(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"Handles the base interface"),(0,p.kt)("h2",{id:"baseinterface-objects"},"BaseInterface Objects"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"class BaseInterface(ABC)\n")),(0,p.kt)("p",null,"Base interface for the various hyper-parameter tuner backends"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Attributes")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"_tuner_config: spock version of the tuner configuration\n_tuner_namespace: tuner namespace that has attr classes that maps to an underlying library types\n")),(0,p.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(tuner_config, tuner_namespace: Spockspace)\n")),(0,p.kt)("p",null,"Base init call that maps a few variables"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"tuner_config: necessary dict object to determine the interface and sample correctly from the underlying library\ntuner_namespace: tuner namespace that has attr classes that maps to an underlying library types\n")),(0,p.kt)("h4",{id:"sample"},"sample"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef sample()\n")),(0,p.kt)("p",null,"Calls the underlying library sample to get a single sample/draw from the hyper-parameter\nsets (e.g. ranges, choices)"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"Spockspace of the current hyper-parameter draw\n")),(0,p.kt)("h4",{id:"_construct"},"_","construct"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef _construct()\n")),(0,p.kt)("p",null,"Constructs the base object needed by the underlying library to construct the correct object that allows\nfor hyper-parameter sampling"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"flat dictionary of all hyper-parameters named with dot notation (class.param_name)\n")),(0,p.kt)("h4",{id:"_get_sample"},"_","get","_","sample"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef _get_sample()\n")),(0,p.kt)("p",null,"Gets the sample parameter dictionary from the underlying backend"),(0,p.kt)("h4",{id:"tuner_status"},"tuner","_","status"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef tuner_status()\n")),(0,p.kt)("p",null,"Returns a dictionary of all the necessary underlying tuner internals to report the result"),(0,p.kt)("h4",{id:"best"},"best"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef best()\n")),(0,p.kt)("p",null,"Returns a Spockspace of the best hyper-parameter config and the associated metric value"),(0,p.kt)("h4",{id:"_sample_rollup"},"_","sample","_","rollup"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _sample_rollup(params)\n")),(0,p.kt)("p",null,"Rollup the sample draw into a dictionary that can be converted to a spockspace with the correct names and\nroots -- un-dots the name structure"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"params: current parameter dictionary -- named by dot notation\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"dictionary of rolled up sampled parameters\nmd5 hash of the dictionary contents\n")),(0,p.kt)("h4",{id:"_gen_spockspace"},"_","gen","_","spockspace"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _gen_spockspace(tune_dict: Dict)\n")),(0,p.kt)("p",null,"Converts a dictionary of dictionaries of parameters into a valid Spockspace"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("p",null,"tune_dict: dictionary of current parameters"),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returns"),":"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"tune_dict")," - Spockspace")),(0,p.kt)("h4",{id:"_config_to_dict"},"_","config","_","to","_","dict"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _config_to_dict(tuner_config: Union[OptunaTunerConfig, AxTunerConfig])\n")),(0,p.kt)("p",null,"Turns an attrs config object into a dictionary"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"tuner_config: attrs config object\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"dictionary of the attrs config object\n")),(0,p.kt)("h4",{id:"_to_spockspace"},"_","to","_","spockspace"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _to_spockspace(tune_dict: Dict)\n")),(0,p.kt)("p",null,"Converts a dict to a Spockspace"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"tune_dict: current dictionary\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"Spockspace of dict\n")),(0,p.kt)("h4",{id:"_get_caster"},"_","get","_","caster"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _get_caster(val)\n")),(0,p.kt)("p",null,"Gets a callable type object from a string type"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"val: current attr val:\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"type class object\n")),(0,p.kt)("h4",{id:"_try_choice_cast"},"_","try","_","choice","_","cast"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _try_choice_cast(val, type_string: str)\n")),(0,p.kt)("p",null,"Try/except for casting choice parameters"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"val: current attr val\ntype_string: spock hyper-parameter type name\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"val: updated attr val\n")),(0,p.kt)("h4",{id:"_try_range_cast"},"_","try","_","range","_","cast"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _try_range_cast(val, type_string: str)\n")),(0,p.kt)("p",null,"Try/except for casting range parameters"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"val: current attr val\ntype_string: spock hyper-parameter type name\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"low: low bound\nhigh: high bound\n")))}d.isMDXComponent=!0}}]);