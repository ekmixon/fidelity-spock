"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[4499],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6249:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return d}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={},c="Build",p={unversionedId:"basics/Building",id:"basics/Building",isDocsHomePage:!1,title:"Build",description:"Once all of the parameters we need have been defined in our spock class and we've written some code to use those",source:"@site/docs/basics/Building.md",sourceDirName:"basics",slug:"/basics/Building",permalink:"/spock/basics/Building",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/basics/Building.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Define",permalink:"/spock/basics/Define"},next:{title:"Configuration Files",permalink:"/spock/basics/Configuration-Files"}},l=[{value:"Generate the spock Namespace Object",id:"generate-the-spock-namespace-object",children:[]},{value:"Using spock Parameters",id:"using-spock-parameters",children:[]}],u={toc:l};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"build"},"Build"),(0,o.kt)("p",null,"Once all of the parameters we need have been defined in our ",(0,o.kt)("inlineCode",{parentName:"p"},"spock")," class and we've written some code to use those\nparameters we need to generate the namespace object. "),(0,o.kt)("p",null,"The namespace object is the heart of ",(0,o.kt)("inlineCode",{parentName:"p"},"spock")," and is how one accesses all of the defined parameters. The generation of\nthe namespace should happen at the highest level of code, preferably in the ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," guard protected call or ",(0,o.kt)("inlineCode",{parentName:"p"},"main"),"\nfunction call. This allows the namespace object, the ",(0,o.kt)("inlineCode",{parentName:"p"},"spock")," classes, or the individual parameters to be passed to\nlower level functionality."),(0,o.kt)("h3",{id:"generate-the-spock-namespace-object"},"Generate the spock Namespace Object"),(0,o.kt)("p",null,"So let's continue in: ",(0,o.kt)("inlineCode",{parentName:"p"},"tutorial.py")),(0,o.kt)("p",null,"Recall that we defined our ",(0,o.kt)("inlineCode",{parentName:"p"},"spock")," class as such:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class Activation(Enum):\n    relu = 'relu'\n    gelu = 'gelu'\n    tanh = 'tanh'\n\n\n@spock\nclass ModelConfig:\n    n_features: int\n    dropout: List[float]\n    hidden_sizes: Tuple[int, int, int]\n    activation: Activation\n")),(0,o.kt)("p",null,"To generate the namespace object, import the ",(0,o.kt)("inlineCode",{parentName:"p"},"SpockBuilder")," class, pass in your ",(0,o.kt)("inlineCode",{parentName:"p"},"@spock")," classes as ",(0,o.kt)("inlineCode",{parentName:"p"},"*args"),",\nadd an optional description, and then chain call the ",(0,o.kt)("inlineCode",{parentName:"p"},"generate()")," method. Each ",(0,o.kt)("inlineCode",{parentName:"p"},"spock")," class is defined in the\nnamespace object given by the class name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from spock import SpockBuilder\n\ndef main():\n    # A simple description\n    description = 'spock Tutorial'\n    # Build out the parser by passing in Spock config objects as *args after description\n    config = SpockBuilder(ModelConfig, desc=description).generate()\n    # One can now access the Spock config object by class name with the returned namespace\n    # For instance...\n    print(config.ModelConfig)\n\n\nif __name__ == '__main__':\n    main()\n")),(0,o.kt)("h3",{id:"using-spock-parameters"},"Using spock Parameters"),(0,o.kt)("p",null,"Our simple neural network code referenced some ",(0,o.kt)("inlineCode",{parentName:"p"},"spock")," defined parameters. So let's link them together correctly and\ntest our model. We will pass the full ",(0,o.kt)("inlineCode",{parentName:"p"},"spock")," class from the generated namespace object to our ",(0,o.kt)("inlineCode",{parentName:"p"},"nn.module")," class."),(0,o.kt)("p",null,"Continuing in: ",(0,o.kt)("inlineCode",{parentName:"p"},"tutorial.py")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import torch\nfrom .basic_nn import BasicNet\n\ndef main():\n    # A simple description\n    description = 'spock Tutorial'\n    # Build out the parser by passing in Spock config objects as *args after description\n    config = SpockBuilder(ModelConfig, desc=description).generate()\n    # Instantiate our neural net using\n    basic_nn = BasicNet(model_config=config.ModelConfig)\n    # Make some random data (BxH): H has dim of features in\n    test_data = torch.rand(10, config.ModelConfig.n_features)\n    result = basic_nn(test_data)\n    print(result)\n")))}d.isMDXComponent=!0}}]);