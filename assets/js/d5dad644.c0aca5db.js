"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[7419],{3905:function(e,t,n){n.d(t,{Zo:function(){return i},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},i=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,p=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||s[m]||c;return n?r.createElement(f,o(o({ref:t},i),{},{components:n})):r.createElement(f,o({ref:t},i))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<c;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9603:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return i},default:function(){return d}});var r=n(7462),a=n(3366),c=(n(7294),n(3905)),o=["components"],l={sidebar_label:"ax",title:"addons.tune.ax"},p=void 0,u={unversionedId:"reference/addons/tune/ax",id:"reference/addons/tune/ax",isDocsHomePage:!1,title:"addons.tune.ax",description:"Handles the ax backend",source:"@site/docs/reference/addons/tune/ax.md",sourceDirName:"reference/addons/tune",slug:"/reference/addons/tune/ax",permalink:"/spock/reference/addons/tune/ax",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/addons/tune/ax.md",tags:[],version:"current",frontMatter:{sidebar_label:"ax",title:"addons.tune.ax"},sidebar:"api",previous:{title:"utils",permalink:"/spock/reference/addons/s3/utils"},next:{title:"builder",permalink:"/spock/reference/addons/tune/builder"}},i=[{value:"AxTunerStatus Objects",id:"axtunerstatus-objects",children:[]},{value:"AxInterface Objects",id:"axinterface-objects",children:[]}],s={toc:i};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,c.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"Handles the ax backend"),(0,c.kt)("h2",{id:"axtunerstatus-objects"},"AxTunerStatus Objects"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"class AxTunerStatus(TypedDict)\n")),(0,c.kt)("p",null,"Tuner status return object for Ax -- supports the service style API from Ax"),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Attributes"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"client: current AxClient instance\ntrial_index: current trial index\n")),(0,c.kt)("h2",{id:"axinterface-objects"},"AxInterface Objects"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"class AxInterface(BaseInterface)\n")),(0,c.kt)("p",null,"Specific override to support the Ax backend -- supports the service style API from Ax"),(0,c.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(tuner_config: AxTunerConfig, tuner_namespace)\n")),(0,c.kt)("p",null,"AxInterface init call that maps variables, creates a map to fnc calls, and constructs the necessary\nunderlying objects"),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Args"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"tuner_config: configuration object for the ax backend\ntuner_namespace: tuner namespace that has attr classes that maps to an underlying library types\n")),(0,c.kt)("h4",{id:"_ax_range"},"_","ax","_","range"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"def _ax_range(name, val)\n")),(0,c.kt)("p",null,"Assemble the dictionary for ax range parameters"),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Args"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"name: parameter name\nval: current attr val\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Returns"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"dictionary that can be added to a parameter list\n")),(0,c.kt)("h4",{id:"_ax_choice"},"_","ax","_","choice"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"def _ax_choice(name, val)\n")),(0,c.kt)("p",null,"Assemble the dictionary for ax choice parameters"),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Args"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"name: parameter name\nval: current attr val\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Returns"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"dictionary that can be added to a parameter list\n")))}d.isMDXComponent=!0}}]);