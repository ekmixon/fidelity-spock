"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[6821],{3905:function(e,t,n){n.d(t,{Zo:function(){return i},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},i=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,k=m["".concat(c,".").concat(d)]||m[d]||u[d]||l;return n?a.createElement(k,p(p({ref:t},i),{},{components:n})):a.createElement(k,p({ref:t},i))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,p=new Array(l);p[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,p[1]=o;for(var s=2;s<l;s++)p[s]=n[s];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},771:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return i},default:function(){return m}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),p=["components"],o={sidebar_label:"interface",title:"addons.tune.interface"},c=void 0,s={unversionedId:"reference/addons/tune/interface",id:"reference/addons/tune/interface",isDocsHomePage:!1,title:"addons.tune.interface",description:"Handles the base interface",source:"@site/docs/reference/addons/tune/interface.md",sourceDirName:"reference/addons/tune",slug:"/reference/addons/tune/interface",permalink:"/spock/reference/addons/tune/interface",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/addons/tune/interface.md",tags:[],version:"current",frontMatter:{sidebar_label:"interface",title:"addons.tune.interface"},sidebar:"api",previous:{title:"config",permalink:"/spock/reference/addons/tune/config"},next:{title:"optuna",permalink:"/spock/reference/addons/tune/optuna"}},i=[{value:"BaseInterface Objects",id:"baseinterface-objects",children:[]}],u={toc:i};function m(e){var t=e.components,n=(0,r.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Handles the base interface"),(0,l.kt)("h2",{id:"baseinterface-objects"},"BaseInterface Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class BaseInterface(ABC)\n")),(0,l.kt)("p",null,"Base interface for the various hyper-parameter tuner backends"),(0,l.kt)("p",null,"Attributes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"_tuner_config: spock version of the tuner configuration\n_tuner_namespace: tuner namespace that has attr classes that maps to an underlying library types\n")),(0,l.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(tuner_config, tuner_namespace: Spockspace)\n")),(0,l.kt)("p",null,"Base init call that maps a few variables"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tuner_config")," - necessary dict object to determine the interface and sample correctly from the underlying library"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tuner_namespace")," - tuner namespace that has attr classes that maps to an underlying library types")),(0,l.kt)("h4",{id:"sample"},"sample"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef sample()\n")),(0,l.kt)("p",null,"Calls the underlying library sample to get a single sample/draw from the hyper-parameter\nsets (e.g. ranges, choices)"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  Spockspace of the current hyper-parameter draw"),(0,l.kt)("h4",{id:"_construct"},"_","construct"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef _construct()\n")),(0,l.kt)("p",null,"Constructs the base object needed by the underlying library to construct the correct object that allows\nfor hyper-parameter sampling"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  flat dictionary of all hyper-parameters named with dot notation (class.param_name)"),(0,l.kt)("h4",{id:"_get_sample"},"_","get","_","sample"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef _get_sample()\n")),(0,l.kt)("p",null,"Gets the sample parameter dictionary from the underlying backend"),(0,l.kt)("h4",{id:"tuner_status"},"tuner","_","status"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef tuner_status()\n")),(0,l.kt)("p",null,"Returns a dictionary of all the necessary underlying tuner internals to report the result"),(0,l.kt)("h4",{id:"best"},"best"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\n@abstractmethod\ndef best()\n")),(0,l.kt)("p",null,"Returns a Spockspace of the best hyper-parameter config and the associated metric value"),(0,l.kt)("h4",{id:"_sample_rollup"},"_","sample","_","rollup"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _sample_rollup(params)\n")),(0,l.kt)("p",null,"Rollup the sample draw into a dictionary that can be converted to a spockspace with the correct names and\nroots -- un-dots the name structure"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"params")," - current parameter dictionary -- named by dot notation")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  dictionary of rolled up sampled parameters\nmd5 hash of the dictionary contents"),(0,l.kt)("h4",{id:"_gen_spockspace"},"_","gen","_","spockspace"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _gen_spockspace(tune_dict: Dict)\n")),(0,l.kt)("p",null,"Converts a dictionary of dictionaries of parameters into a valid Spockspace"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tune_dict")," - dictionary of current parameters")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tune_dict")," - Spockspace")),(0,l.kt)("h4",{id:"_config_to_dict"},"_","config","_","to","_","dict"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _config_to_dict(tuner_config: Union[OptunaTunerConfig, AxTunerConfig])\n")),(0,l.kt)("p",null,"Turns an attrs config object into a dictionary"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tuner_config")," - attrs config object")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  dictionary of the attrs config object"),(0,l.kt)("h4",{id:"_to_spockspace"},"_","to","_","spockspace"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _to_spockspace(tune_dict: Dict)\n")),(0,l.kt)("p",null,"Converts a dict to a Spockspace"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"tune_dict")," - current dictionary")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  Spockspace of dict"),(0,l.kt)("h4",{id:"_get_caster"},"_","get","_","caster"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _get_caster(val)\n")),(0,l.kt)("p",null,"Gets a callable type object from a string type"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"val")," - current attr val:")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  type class object"),(0,l.kt)("h4",{id:"_try_choice_cast"},"_","try","_","choice","_","cast"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _try_choice_cast(val, type_string: str)\n")),(0,l.kt)("p",null,"Try/except for casting choice parameters"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"val")," - current attr val"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type_string")," - spock hyper-parameter type name")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"val")," - updated attr val")),(0,l.kt)("h4",{id:"_try_range_cast"},"_","try","_","range","_","cast"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _try_range_cast(val, type_string: str)\n")),(0,l.kt)("p",null,"Try/except for casting range parameters"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"val")," - current attr val"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type_string")," - spock hyper-parameter type name")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"low")," - low bound"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"high")," - high bound")))}m.isMDXComponent=!0}}]);