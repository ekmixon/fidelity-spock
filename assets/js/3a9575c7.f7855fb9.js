"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[8845],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return k}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),i=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,p=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=i(a),k=r,m=d["".concat(o,".").concat(k)]||d[k]||c[k]||p;return a?n.createElement(m,l(l({ref:t},u),{},{components:a})):n.createElement(m,l({ref:t},u))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=a.length,l=new Array(p);l[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var i=2;i<p;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4026:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return i},toc:function(){return u},default:function(){return d}});var n=a(7462),r=a(3366),p=(a(7294),a(3905)),l=["components"],s={sidebar_label:"typed",title:"backend.typed"},o=void 0,i={unversionedId:"reference/backend/typed",id:"reference/backend/typed",isDocsHomePage:!1,title:"backend.typed",description:"Handles the definitions of arguments types for Spock (backend: attrs)",source:"@site/docs/reference/backend/typed.md",sourceDirName:"reference/backend",slug:"/reference/backend/typed",permalink:"/reference/backend/typed",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/backend/typed.md",tags:[],version:"current",frontMatter:{sidebar_label:"typed",title:"backend.typed"},sidebar:"api",previous:{title:"spaces",permalink:"/reference/backend/spaces"},next:{title:"utils",permalink:"/reference/backend/utils"}},u=[{value:"SavePath Objects",id:"savepath-objects",children:[]}],c={toc:u};function d(e){var t=e.components,a=(0,r.Z)(e,l);return(0,p.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"Handles the definitions of arguments types for Spock (backend: attrs)"),(0,p.kt)("h2",{id:"savepath-objects"},"SavePath Objects"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"class SavePath(str)\n")),(0,p.kt)("p",null,"Spock special key for saving the Spock config to file"),(0,p.kt)("p",null,"Defines a special key use to save the current Spock config to file"),(0,p.kt)("h4",{id:"_get_name_py_version"},"_","get","_","name","_","py","_","version"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _get_name_py_version(typed)\n")),(0,p.kt)("p",null,"Gets the name of the type depending on the python version"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"typed: the type of the parameter\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"name of the type\n")),(0,p.kt)("h4",{id:"_extract_base_type"},"_","extract","_","base","_","type"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _extract_base_type(typed)\n")),(0,p.kt)("p",null,"Extracts the name of the type from a _GenericAlias"),(0,p.kt)("p",null,"Assumes that the derived types are only of length 1 as the ",(0,p.kt)("strong",{parentName:"p"},"args")," are ","[0]"," recursed... this is not true for\ntuples"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"typed: the type of the parameter\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"name of type\n")),(0,p.kt)("h4",{id:"_recursive_generic_validator"},"_","recursive","_","generic","_","validator"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _recursive_generic_validator(typed)\n")),(0,p.kt)("p",null,"Recursively assembles the validators for nested generic types"),(0,p.kt)("p",null,"Walks through the nested type structure and determines whether to recurse all the way to a base type. Once it\nhits the base type it bubbles up the correct validator that is nested within the upper validator"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"typed: input type\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"return_type: recursively built deep_iterable validators\n")),(0,p.kt)("h4",{id:"_generic_alias_katra"},"_","generic","_","alias","_","katra"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _generic_alias_katra(typed, default=None, optional=False)\n")),(0,p.kt)("p",null,"Private interface to create a subscripted generic_alias katra"),(0,p.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,p.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using attrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples), handles setting default parameters,\nand deals with parameter optionality"),(0,p.kt)("p",null,"Handles: List","[type]"," and Tuple","[type]"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"typed: the type of the parameter to define\ndefault: the default value to assign if given\noptional: whether to make the parameter optional or not (thus allowing None)\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"x: Attribute from attrs\n")),(0,p.kt)("h4",{id:"_check_enum_props"},"_","check","_","enum","_","props"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _check_enum_props(typed)\n")),(0,p.kt)("p",null,"Handles properties of enums"),(0,p.kt)("p",null,"Checks if all types of the enum are the same and assembles a list of allowed values"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"typed: the type of parameter (Enum)\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"base_type: the base type of the Enum\nallowed: List of allowed values of the Enum\n")),(0,p.kt)("h4",{id:"_enum_katra"},"_","enum","_","katra"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _enum_katra(typed, default=None, optional=False)\n")),(0,p.kt)("p",null,"Private interface to create a Enum typed katra"),(0,p.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,p.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using attrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples), handles setting default parameters,\nand deals with parameter optionality"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"typed: the type of the parameter to define\ndefault: the default value to assign if given\noptional: whether to make the parameter optional or not (thus allowing None)\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"x: Attribute from attrs\n")),(0,p.kt)("h4",{id:"_enum_base_katra"},"_","enum","_","base","_","katra"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _enum_base_katra(typed, base_type, allowed, default=None, optional=False)\n")),(0,p.kt)("p",null,"Private interface to create a base Enum typed katra"),(0,p.kt)("p",null,"Here we handle the base types of enums that allows us to force a type check on the instance"),(0,p.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,p.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using attrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples), handles setting default parameters,\nand deals with parameter optionality"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":\ntyped: the type of the parameter to define\nbase_type: underlying base type\nallowed: set of allowed values\ndefault: the default value to assign if given\noptional: whether to make the parameter optional or not (thus allowing None)"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"x: Attribute from attrs\n")),(0,p.kt)("h4",{id:"_in_type"},"_","in","_","type"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _in_type(instance, attribute, value, options)\n")),(0,p.kt)("p",null,"attrs validator for class type enum"),(0,p.kt)("p",null,"Checks if the type of the class (e.g. value) is in the specified set of types provided"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"instance: current object instance\nattribute: current attribute instance\nvalue: current value trying to be set in the attrs instance\noptions: list, tuple, or enum of allowed options\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("h4",{id:"_enum_class_katra"},"_","enum","_","class","_","katra"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _enum_class_katra(typed, allowed, default=None, optional=False)\n")),(0,p.kt)("p",null,"Private interface to create a base Enum typed katra"),(0,p.kt)("p",null,"Here we handle the class based types of enums. Seeing as these classes are generated dynamically we cannot\nforce type checking of a specific instance however the in_ validator will catch an incorrect instance type"),(0,p.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,p.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using attrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples), handles setting default parameters,\nand deals with parameter optionality"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"typed: the type of the parameter to define\nallowed: set of allowed values\ndefault: the default value to assign if given\noptional: whether to make the parameter optional or not (thus allowing None)\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"x: Attribute from attrs\n")),(0,p.kt)("h4",{id:"_type_katra"},"_","type","_","katra"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _type_katra(typed, default=None, optional=False)\n")),(0,p.kt)("p",null,"Private interface to create a simple typed katra"),(0,p.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,p.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using attrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples), handles setting default parameters,\nand deals with parameter optionality"),(0,p.kt)("p",null,"Handles: bool, string, float, int, List, and Tuple"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"typed: the type of the parameter to define\ndefault: the default value to assign if given\noptional: whether to make the parameter optional or not (thus allowing None)\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"x: Attribute from attrs\n")),(0,p.kt)("h4",{id:"_handle_optional_typing"},"_","handle","_","optional","_","typing"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _handle_optional_typing(typed)\n")),(0,p.kt)("p",null,"Handles when a type hint is Optional"),(0,p.kt)("p",null,"Handles Optional","[type]"," typing and strips out the base type to pass back to the creation of a katra which needs base\ntyping"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"typed: type\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"typed: type (modified if Optional)\noptional: boolean for katra creation\n")),(0,p.kt)("h4",{id:"_check_generic_recursive_single_type"},"_","check","_","generic","_","recursive","_","single","_","type"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def _check_generic_recursive_single_type(typed)\n")),(0,p.kt)("p",null,"Checks generics for the single types -- mixed types of generics are not allowed"),(0,p.kt)("p",null,"DEPRECATED -- NOW SUPPORTS MIXED TYPES OF TUPLES"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre"},"typed: type\n")),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Returns"),":"),(0,p.kt)("h4",{id:"katra"},"katra"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"def katra(typed, default=None)\n")),(0,p.kt)("p",null,"Public interface to create a katra"),(0,p.kt)("p",null,"A ","'","katra","'"," is the basic functional unit of ",(0,p.kt)("inlineCode",{parentName:"p"},"spock"),". It defines a parameter using attrs as the backend, type checks\nboth simple types and subscripted GenericAlias types (e.g. lists and tuples), handles setting default parameters,\nand deals with parameter optionality"),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},"Args"),":"),(0,p.kt)("p",null,"typed: the type of the parameter to define\ndefault: the default value to assign if given\noptional: whether to make the parameter optional or not (thus allowing None)"),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Returns"),":"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"x")," - Attribute from attrs")))}d.isMDXComponent=!0}}]);