"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[6049],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),k=u(n),d=r,m=k["".concat(o,".").concat(d)]||k[d]||c[d]||l;return n?a.createElement(m,p(p({ref:t},s),{},{components:n})):a.createElement(m,p({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,p=new Array(l);p[0]=k;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var u=2;u<l;u++)p[u]=n[u];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},9352:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return s},default:function(){return k}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),p=["components"],i={sidebar_label:"utils",title:"utils"},o=void 0,u={unversionedId:"reference/utils",id:"reference/utils",isDocsHomePage:!1,title:"utils",description:"Utility functions for Spock",source:"@site/docs/reference/utils.md",sourceDirName:"reference",slug:"/reference/utils",permalink:"/spock/reference/utils",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"utils",title:"utils"},sidebar:"api",previous:{title:"handlers",permalink:"/spock/reference/handlers"}},s=[],c={toc:s};function k(e){var t=e.components,n=(0,r.Z)(e,p);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Utility functions for Spock"),(0,l.kt)("h4",{id:"path_object_to_s3path"},"path","_","object","_","to","_","s3path"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def path_object_to_s3path(path: Path) -> str\n")),(0,l.kt)("p",null,"Convert a path object into a string s3 path"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," - a spock config path")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  string of s3 path"),(0,l.kt)("h4",{id:"check_path_s3"},"check","_","path","_","s3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def check_path_s3(path: Path) -> bool\n")),(0,l.kt)("p",null,"Checks the given path to see if it matches the s3:// regex"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," - a spock config path")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  boolean of regex match"),(0,l.kt)("h4",{id:"_is_spock_instance"},"_","is","_","spock","_","instance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _is_spock_instance(__obj: object)\n")),(0,l.kt)("p",null,"Checks if the object is a @spock decorated class"),(0,l.kt)("p",null,"Private interface that checks to see if the object passed in is registered within the spock module and also\nis a class with attrs attributes (",(0,l.kt)("strong",{parentName:"p"},"attrs_attrs"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"__obj")," - class to inspect")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  bool"),(0,l.kt)("h4",{id:"_is_spock_tune_instance"},"_","is","_","spock","_","tune","_","instance"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _is_spock_tune_instance(__obj: object)\n")),(0,l.kt)("p",null,"Checks if the object is a @spock decorated class"),(0,l.kt)("p",null,"Private interface that checks to see if the object passed in is registered within the spock module tune addon and also\nis a class with attrs attributes (",(0,l.kt)("strong",{parentName:"p"},"attrs_attrs"),")"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"__obj")," - class to inspect")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  bool"),(0,l.kt)("h4",{id:"_check_iterable"},"_","check","_","iterable"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _check_iterable(iter_obj: Union[tuple, list, EnumMeta])\n")),(0,l.kt)("p",null,"Check if an iterable type contains a spock class"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"iter_obj")," - iterable type")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  boolean if the iterable contains at least one spock class"),(0,l.kt)("h4",{id:"make_argument"},"make","_","argument"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def make_argument(arg_name, arg_type, parser)\n")),(0,l.kt)("p",null,"Make argparser argument based on type"),(0,l.kt)("p",null,"Based on the type passed in handle the creation of the argparser argument so that overrides will have the correct\nbehavior when set"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arg_name")," - name for the argument"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"arg_type")," - type of the argument"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parser")," - current parser")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"parser")," - updated argparser")),(0,l.kt)("h4",{id:"_handle_generic_type_args"},"_","handle","_","generic","_","type","_","args"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _handle_generic_type_args(val)\n")),(0,l.kt)("p",null,"Evaluates a string containing a Python literal"),(0,l.kt)("p",null,"Seeing a list and tuple types will come in as string literal format, use ast to get the actual type"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"val")," - string literal")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  the underlying string literal type"),(0,l.kt)("h4",{id:"add_info"},"add","_","info"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def add_info()\n")),(0,l.kt)("p",null,"Adds extra information to the output dictionary"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"out_dict")," - output dictionary")),(0,l.kt)("h4",{id:"make_blank_git"},"make","_","blank","_","git"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def make_blank_git(out_dict)\n")),(0,l.kt)("p",null,"Adds blank git info"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"out_dict")," - current output dictionary")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"out_dict")," - output dictionary with added git info")),(0,l.kt)("h4",{id:"add_repo_info"},"add","_","repo","_","info"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def add_repo_info(out_dict)\n")),(0,l.kt)("p",null,"Adds GIT information to the output dictionary"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"out_dict")," - output dictionary")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"out_dict")," - output dictionary")),(0,l.kt)("h4",{id:"add_generic_info"},"add","_","generic","_","info"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def add_generic_info(out_dict)\n")),(0,l.kt)("p",null,"Adds date, fqdn information to the output dictionary"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"out_dict")," - output dictionary")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"out_dict")," - output dictionary")),(0,l.kt)("h4",{id:"_maybe_docker"},"_","maybe","_","docker"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def _maybe_docker(cgroup_path="/proc/self/cgroup")\n')),(0,l.kt)("p",null,"Make a best effort to determine if run in a docker container"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cgroup_path")," - path to cgroup file")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  boolean of best effort docker determination"),(0,l.kt)("h4",{id:"_maybe_k8s"},"_","maybe","_","k8s"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def _maybe_k8s(cgroup_path="/proc/self/cgroup")\n')),(0,l.kt)("p",null,"Make a best effort to determine if run in a container via k8s"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cgroup_path")," - path to cgroup file")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  boolean of best effort k8s determination"),(0,l.kt)("h4",{id:"deep_payload_update"},"deep","_","payload","_","update"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def deep_payload_update(source, updates)\n")),(0,l.kt)("p",null,"Deeply updates a dictionary"),(0,l.kt)("p",null,"Iterates through a dictionary recursively to update individual values within a possibly nested dictionary\nof dictionaries -- creates a dictionary if empty and trying to recurse"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"source")," - source dictionary"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"updates")," - updates to the dictionary")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"source")," - updated version of the source dictionary")),(0,l.kt)("h4",{id:"check_payload_overwrite"},"check","_","payload","_","overwrite"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def check_payload_overwrite(payload, updates, configs, overwrite="")\n')),(0,l.kt)("p",null,"Warns when parameters are overwritten across payloads as order will matter"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"payload")," - current payload"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"payload_update")," - update to add to payload"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"configs")," - config path"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"overwrite")," - name of parent")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"))}k.isMDXComponent=!0}}]);