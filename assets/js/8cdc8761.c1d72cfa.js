"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[2255],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),k=r,h=u["".concat(i,".").concat(k)]||u[k]||d[k]||l;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<l;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5126:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),s=["components"],o={sidebar_label:"graph",title:"graph"},i=void 0,p={unversionedId:"reference/graph",id:"reference/graph",isDocsHomePage:!1,title:"graph",description:"Handles creation and ops for DAGs",source:"@site/docs/reference/graph.md",sourceDirName:"reference",slug:"/reference/graph",permalink:"/spock/reference/graph",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/graph.md",tags:[],version:"current",frontMatter:{sidebar_label:"graph",title:"graph"},sidebar:"api",previous:{title:"exceptions",permalink:"/spock/reference/exceptions"},next:{title:"handlers",permalink:"/spock/reference/handlers"}},c=[{value:"Graph Objects",id:"graph-objects",children:[]}],d={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,s);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Handles creation and ops for DAGs"),(0,l.kt)("h2",{id:"graph-objects"},"Graph Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Graph()\n")),(0,l.kt)("p",null,"Class that holds graph methods for determining dependencies between spock classes"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_input_classes")," - list of input classes that link to a backend"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_dag")," - graph of the dependencies between spock classes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_lazy")," - attempts to lazily find @spock decorated classes registered within sys.modules",'["',"spock",'"]',".backend.config")),(0,l.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(input_classes: List, lazy: bool)\n")),(0,l.kt)("p",null,"Init call for Graph class"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"input_classes")," - list of input classes that link to a backend"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"lazy")," - attempts to lazily find @spock decorated classes registered within sys.modules",'["',"spock",'"]',".backend.config")),(0,l.kt)("h4",{id:"dag"},"dag"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef dag()\n")),(0,l.kt)("p",null,"Returns the DAG"),(0,l.kt)("h4",{id:"nodes"},"nodes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef nodes()\n")),(0,l.kt)("p",null,"Returns the input_classes/nodes"),(0,l.kt)("h4",{id:"node_names"},"node","_","names"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef node_names()\n")),(0,l.kt)("p",null,"Returns the node names"),(0,l.kt)("h4",{id:"roots"},"roots"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef roots()\n")),(0,l.kt)("p",null,"Returns the roots of the dependency graph"),(0,l.kt)("h4",{id:"_yield_class_deps"},"_","yield","_","class","_","deps"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _yield_class_deps(classes: List) -> Generator[Tuple, None, None]\n")),(0,l.kt)("p",null,"Generator to iterate through nodes and find dependencies"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"classes")," - list of classes to iterate through")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Yields"),":"),(0,l.kt)("p",null,"  tuple or the base input class and the current name of the dependent class"),(0,l.kt)("h4",{id:"_lazily_find_classes"},"_","lazily","_","find","_","classes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _lazily_find_classes(classes: List) -> Tuple\n")),(0,l.kt)("p",null,"Searches within the spock sys modules attributes to lazily find @spock decorated classes"),(0,l.kt)("p",null,"These classes have been decorated with @spock but might not have been passes into the ConfigArgBuilder so\nthis allows for ","'","lazy","'"," lookup of these classes to make the call to ConfigArgBuilder a little less verbose\nwhen there are a lot of spock classes"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  tuple of any lazily discovered classes"),(0,l.kt)("h4",{id:"_lazily_find_parents"},"_","lazily","_","find","_","parents"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _lazily_find_parents() -> Tuple\n")),(0,l.kt)("p",null,"Searches within the current set of input_classes (@spock decorated classes) to lazily find any parents"),(0,l.kt)("p",null,"Given that lazy inheritance means that the parent classes won","'","t be included (since they are cast to spock\nclasses within the decorator and the MRO is handled internally) this allows the lazy flag to find those parent\nclasses and add them to the SpockBuilder *args (input classes)."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  tuple of any lazily discovered classes"),(0,l.kt)("h4",{id:"_build"},"_","build"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _build() -> Dict\n")),(0,l.kt)("p",null,"Builds a dictionary of nodes and their edges (essentially builds the DAG)"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  dictionary of nodes and their edges"),(0,l.kt)("h4",{id:"_has_cycles"},"_","has","_","cycles"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _has_cycles() -> bool\n")),(0,l.kt)("p",null,"Uses DFS to check for cycles within the spock dependency graph"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  boolean if a cycle is found"),(0,l.kt)("h4",{id:"_cycle_dfs"},"_","cycle","_","dfs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _cycle_dfs(node: str, visited: Dict, recursion_stack: Dict) -> bool\n")),(0,l.kt)("p",null,"DFS via a recursion stack for cycles"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"node")," - current graph node (spock class type)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"visited")," - dictionary of visited nodes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"recursion_stack")," - dictionary that is the recursion stack that is used to find cycles")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  boolean if a cycle is found"))}u.isMDXComponent=!0}}]);