"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[9994],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),i=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=i(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=i(n),m=a,f=d["".concat(o,".").concat(m)]||d[m]||u[m]||l;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var i=2;i<l;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},614:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return i},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),s=["components"],p={sidebar_label:"help",title:"backend.help"},o=void 0,i={unversionedId:"reference/backend/help",id:"reference/backend/help",isDocsHomePage:!1,title:"backend.help",description:"Handles all ops for assembling and pretty printing help info",source:"@site/docs/reference/backend/help.md",sourceDirName:"reference/backend",slug:"/reference/backend/help",permalink:"/reference/backend/help",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/backend/help.md",tags:[],version:"current",frontMatter:{sidebar_label:"help",title:"backend.help"},sidebar:"api",previous:{title:"handler",permalink:"/reference/backend/handler"},next:{title:"payload",permalink:"/reference/backend/payload"}},c=[],u={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Handles all ops for assembling and pretty printing help info"),(0,l.kt)("h4",{id:"find_attribute_idx"},"find","_","attribute","_","idx"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def find_attribute_idx(newline_split_docs)\n")),(0,l.kt)("p",null,"Finds the possible split between the header and Attribute annotations"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("p",null,"newline_split_docs: new line split text"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"idx")," - -1 if none or the idx of Attributes")),(0,l.kt)("h4",{id:"split_docs"},"split","_","docs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def split_docs(obj)\n")),(0,l.kt)("p",null,"Possibly splits head class doc string from attribute docstrings"),(0,l.kt)("p",null,"Attempts to find the first contiguous line within the Google style docstring to use as the class docstring.\nSplits the docs base on the Attributes tag if present."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"obj: class object to rip info from\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"class_doc: class docstring if present or blank str\nattr_doc: list of attribute doc strings\n")),(0,l.kt)("h4",{id:"match_attribute_docs"},"match","_","attribute","_","docs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def match_attribute_docs(attr_name, attr_docs, attr_type_str, attr_default=NOTHING)\n")),(0,l.kt)("p",null,"Matches class attributes with attribute docstrings via regex"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"attr_name: attribute name\nattr_docs: list of attribute docstrings\nattr_type_str: str representation of the attribute type\nattr_default: str representation of a possible default value\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dictionary of packed attribute information\n")),(0,l.kt)("h4",{id:"handle_attributes_print"},"handle","_","attributes","_","print"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def handle_attributes_print(info_dict, max_indent: int)\n")),(0,l.kt)("p",null,"Prints attribute information in an argparser style format"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"info_dict: packed attribute info dictionary to print\nmax_indent: max indent for pretty print of help\n")),(0,l.kt)("h4",{id:"get_type_string"},"get","_","type","_","string"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_type_string(val, nested_others)\n")),(0,l.kt)("p",null,"Gets the type of the attr val as a string"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"val: current attr being processed\nnested_others: list of nested others to deal with that might have module path info in the string\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"type_string: type of the attr as a str\n")),(0,l.kt)("h4",{id:"get_from_sys_modules"},"get","_","from","_","sys","_","modules"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def get_from_sys_modules(cls_name)\n")),(0,l.kt)("p",null,"Gets the class from a dot notation name"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cls_name: dot notation enum name\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"module: enum class\n")),(0,l.kt)("h4",{id:"handle_help_main"},"handle","_","help","_","main"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def handle_help_main(input_classes: list, module_name: str, extract_fnc: Callable, max_indent: int)\n")),(0,l.kt)("p",null,"Handles the print of the main class types"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"input_classes: current set of input classes\nmodule_name: module name to match\nextract_fnc: function that gets the nested lists within classes\nmax_indent: max indent for pretty print of help\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"other_list: extended list of other classes/enums to process\n")),(0,l.kt)("h4",{id:"handle_help_enums"},"handle","_","help","_","enums"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def handle_help_enums(other_list: list, module_name: str, extract_fnc: Callable, max_indent: int)\n")),(0,l.kt)("p",null,"Handles any extra enums from non main args"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"other_list: extended list of other classes/enums to process\nmodule_name: module name to match\nextract_fnc: function that gets the nested lists within classes\nmax_indent: max indent for pretty print of help\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"None\n")),(0,l.kt)("h4",{id:"attrs_help"},"attrs","_","help"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def attrs_help(input_classes: Union[list, tuple], module_name: str, extract_fnc: Callable, max_indent: int)\n")),(0,l.kt)("p",null,"Handles walking through a list classes to get help info"),(0,l.kt)("p",null,"For each class this function will search ",(0,l.kt)("strong",{parentName:"p"},"doc")," and attempt to pull out help information for both the class\nitself and each attribute within the class. If it finds a repeated class in a iterable object it will\nrecursively call self to handle information"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"input_classes: list of attr classes\nmodule_name: name of module to match\nextract_fnc: function that gets the nested lists within classes\nmax_indent: max indent for pretty print of help\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"None\n")))}d.isMDXComponent=!0}}]);