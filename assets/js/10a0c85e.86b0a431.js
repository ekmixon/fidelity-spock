"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[4054],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),i=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=i(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=i(n),k=r,f=d["".concat(c,".").concat(k)]||d[k]||u[k]||l;return n?a.createElement(f,o(o({ref:t},s),{},{components:n})):a.createElement(f,o({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var i=2;i<l;i++)o[i]=n[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8960:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return i},toc:function(){return s},default:function(){return d}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],p={sidebar_label:"saver",title:"backend.saver"},c=void 0,i={unversionedId:"reference/backend/saver",id:"reference/backend/saver",isDocsHomePage:!1,title:"backend.saver",description:"Handles prepping and saving the Spock config",source:"@site/docs/reference/backend/saver.md",sourceDirName:"reference/backend",slug:"/reference/backend/saver",permalink:"/reference/backend/saver",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/backend/saver.md",tags:[],version:"current",frontMatter:{sidebar_label:"saver",title:"backend.saver"},sidebar:"api",previous:{title:"payload",permalink:"/reference/backend/payload"},next:{title:"spaces",permalink:"/reference/backend/spaces"}},s=[{value:"BaseSaver Objects",id:"basesaver-objects",children:[]},{value:"AttrSaver Objects",id:"attrsaver-objects",children:[]}],u={toc:s};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Handles prepping and saving the Spock config"),(0,l.kt)("h2",{id:"basesaver-objects"},"BaseSaver Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class BaseSaver(BaseHandler)\n")),(0,l.kt)("p",null,"Base class for saving configs"),(0,l.kt)("p",null,"Contains methods to build a correct output payload and then writes to file based on the file\nextension"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Attributes"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"_writers: maps file extension to the correct i/o handler\n_s3_config: optional S3Config object to handle s3 access\n")),(0,l.kt)("h4",{id:"dict_payload"},"dict","_","payload"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def dict_payload(payload)\n")),(0,l.kt)("p",null,"Clean up the config payload so it can be returned as a dict representation"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"payload: dirty payload\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"clean_dict: cleaned output payload\n")),(0,l.kt)("h4",{id:"save"},"save"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'def save(payload, path, file_name=None, create_save_path=False, extra_info=True, file_extension=".yaml", tuner_payload=None, fixed_uuid=None)\n')),(0,l.kt)("p",null,"Writes Spock config to file"),(0,l.kt)("p",null,"Cleans and builds an output payload and then correctly writes it to file based on the\nspecified file extension"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"payload: current config payload\npath: path to save\nfile_name: name of file (will be appended with .spock.cfg.file_extension) -- falls back to uuid if None\ncreate_save_path: boolean to create the path if non-existent\nextra_info: boolean to write extra info\nfile_extension: what type of file to write\ntuner_payload: tuner level payload (unsampled)\nfixed_uuid: fixed uuid to allow for file overwrite\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"None\n")),(0,l.kt)("h4",{id:"_clean_up_values"},"_","clean","_","up","_","values"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef _clean_up_values(payload)\n")),(0,l.kt)("p",null,"Clean up the config payload so it can be written to file"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"payload: dirty payload\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"clean_dict: cleaned output payload\n")),(0,l.kt)("h4",{id:"_clean_tuner_values"},"_","clean","_","tuner","_","values"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef _clean_tuner_values(payload)\n")),(0,l.kt)("p",null,"Cleans up the base tuner payload that is not sampled"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"payload: dirty payload\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"clean_dict: cleaned output payload\n")),(0,l.kt)("h4",{id:"_clean_output"},"_","clean","_","output"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _clean_output(out_dict)\n")),(0,l.kt)("p",null,"Clean up the dictionary so it can be written to file"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"out_dict: cleaned dictionary\nextra_info: boolean to add extra info\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"clean_dict: cleaned output payload\n")),(0,l.kt)("h4",{id:"_recursive_tuple_to_list"},"_","recursive","_","tuple","_","to","_","list"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _recursive_tuple_to_list(value)\n")),(0,l.kt)("p",null,"Recursively turn tuples into lists"),(0,l.kt)("p",null,"Recursively looks through tuple(s) and convert to lists"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"value: value to check and set typ if necessary\ntyped: type of the generic alias to check against\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"value: updated value with correct type casts\n")),(0,l.kt)("h2",{id:"attrsaver-objects"},"AttrSaver Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class AttrSaver(BaseSaver)\n")),(0,l.kt)("p",null,"Base class for saving configs for the attrs backend"),(0,l.kt)("p",null,"Contains methods to build a correct output payload and then writes to file based on the file\nextension"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Attributes"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"_writers: maps file extension to the correct i/o handler\n")),(0,l.kt)("h4",{id:"_recursively_handle_clean"},"_","recursively","_","handle","_","clean"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _recursively_handle_clean(payload, out_dict, parent_name=None, all_cls=None)\n")),(0,l.kt)("p",null,"Recursively works through spock classes and adds clean data to a dictionary"),(0,l.kt)("p",null,"Given a payload (Spockspace) work recursively through items that don","'","t have parents to catch all\nparameter definitions while correctly mapping nested class definitions to their base level class thus\nallowing the output markdown to be a valid input file"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"payload: current payload (namespace)\nout_dict: output dictionary\nparent_name: name of the parent spock class if nested\nall_cls: all top level spock class definitions\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"out_dict: modified dictionary with the cleaned data\n")))}d.isMDXComponent=!0}}]);