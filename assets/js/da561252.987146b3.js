"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[5023],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),k=s(n),m=l,d=k["".concat(p,".").concat(m)]||k[m]||c[m]||a;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,o=new Array(a);o[0]=k;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},282:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return k}});var r=n(7462),l=n(3366),a=(n(7294),n(3905)),o=["components"],i={sidebar_label:"resolvers",title:"backend.resolvers"},p=void 0,s={unversionedId:"reference/backend/resolvers",id:"reference/backend/resolvers",isDocsHomePage:!1,title:"backend.resolvers",description:"Resolver functions for Spock",source:"@site/docs/reference/backend/resolvers.md",sourceDirName:"reference/backend",slug:"/reference/backend/resolvers",permalink:"/spock/reference/backend/resolvers",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/backend/resolvers.md",tags:[],version:"current",frontMatter:{sidebar_label:"resolvers",title:"backend.resolvers"},sidebar:"api",previous:{title:"payload",permalink:"/spock/reference/backend/payload"},next:{title:"saver",permalink:"/spock/reference/backend/saver"}},u=[{value:"BaseResolver Objects",id:"baseresolver-objects",children:[]},{value:"EnvResolver Objects",id:"envresolver-objects",children:[]},{value:"CryptoResolver Objects",id:"cryptoresolver-objects",children:[]}],c={toc:u};function k(e){var t=e.components,n=(0,l.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Resolver functions for Spock"),(0,a.kt)("h2",{id:"baseresolver-objects"},"BaseResolver Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class BaseResolver(ABC)\n")),(0,a.kt)("p",null,"Base class for resolvers"),(0,a.kt)("p",null,"Contains base methods for handling resolver syntax"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_annotation_set")," - current set of supported resolver annotations")),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__()\n")),(0,a.kt)("p",null,"Init for BaseResolver class"),(0,a.kt)("h4",{id:"resolve"},"resolve"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef resolve(value: Any, value_type: _T) -> Tuple[Any, Optional[str]]\n")),(0,a.kt)("p",null,"Resolves a variable from a given resolver syntax"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," - current value to attempt to resolve"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value_type")," - type of the value to cast into")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  Tuple of correctly typed resolved variable and any annotations"),(0,a.kt)("h4",{id:"_handle_default"},"_","handle","_","default"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _handle_default(value: str) -> Tuple[str, Union[str, None]]\n")),(0,a.kt)("p",null,"Handles setting defaults if allowed for a resolver"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," - current string value")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  tuple of given value and the default value"),(0,a.kt)("h4",{id:"_check_base_regex"},"_","check","_","base","_","regex"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _check_base_regex(full_regex_op: Pattern, value: Any) -> bool\n")),(0,a.kt)("p",null,"Check if the value passed into the resolver matches the compiled regex op"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"full_regex_op")," - the full compiled regex"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," - the value passed into the resolver")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  boolean if there is a regex match"),(0,a.kt)("h4",{id:"_attempt_cast"},"_","attempt","_","cast"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _attempt_cast(maybe_env: Optional[str], value_type: _T, env_value: str) -> Any\n")),(0,a.kt)("p",null,"Attempts to cast the resolved variable into the given type"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"maybe_env")," - possible resolved variable"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value_type")," - type to cast into"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"env_value")," - the reference to the resolved variable")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  value type cast into the correct type"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Raises"),":"),(0,a.kt)("p",null,"  _SpockResolverError if it cannot be cast into the specified type"),(0,a.kt)("h4",{id:"_apply_regex"},"_","apply","_","regex"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def _apply_regex(end_regex_op: Pattern, clip_regex_op: Pattern, value: str, allow_default: bool, allow_annotation: bool) -> Tuple[str, str, Optional[str]]\n")),(0,a.kt)("p",null,"Applies the front and back regexes to the string value, determines defaults and annotations"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"end_regex_op")," - compiled regex for the back half of the match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"clip_regex_op")," - compiled regex for the front half of the match"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," - current string value to resolve"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"allow_default")," - if allowed to contain default value syntax"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"allow_annotation")," - if allowed to contain annotation syntax")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  tuple containing the resolved string reference, the default value, and the annotation string"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Raises"),":"),(0,a.kt)("p",null,"  _SpockResolverError if annotation isn","'","t within the supported set, annotation is not supported, multiple ",(0,a.kt)("inlineCode",{parentName:"p"},","),"\nvalues are used, or defaults are given yet not supported"),(0,a.kt)("h2",{id:"envresolver-objects"},"EnvResolver Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class EnvResolver(BaseResolver)\n")),(0,a.kt)("p",null,"Class for resolving environmental variables"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_annotation_set")," - current set of supported resolver annotations"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CLIP_ENV_PATTERN")," - regex for the front half"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CLIP_REGEX_OP")," - compiled regex for front half"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"END_ENV_PATTERN")," - regex for back half"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"END_REGEX_OP")," - comiled regex for back half"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FULL_ENV_PATTERN")," - full regex pattern"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FULL_REGEX_OP")," - compiled regex for full regex")),(0,a.kt)("h4",{id:"__init__-1"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__()\n")),(0,a.kt)("p",null,"Init for EnvResolver"),(0,a.kt)("h4",{id:"_get_from_env"},"_","get","_","from","_","env"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _get_from_env(default_value: Optional[str], env_value: str) -> Optional[str]\n")),(0,a.kt)("p",null,"Gets a value from an environmental variable"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"default_value")," - default value to fall back on for the env resolver"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"env_value")," - current string of the env variable to get")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  string or None for the resolved env variable"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Raises"),":"),(0,a.kt)("p",null,"  _SpockResolverError if the env variable is not available or if no default is specified"),(0,a.kt)("h2",{id:"cryptoresolver-objects"},"CryptoResolver Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class CryptoResolver(BaseResolver)\n")),(0,a.kt)("p",null,"Class for resolving cryptographic variables"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_annotation_set")," - current set of supported resolver annotations"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CLIP_ENV_PATTERN")," - regex for the front half"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CLIP_REGEX_OP")," - compiled regex for front half"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"END_ENV_PATTERN")," - regex for back half"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"END_REGEX_OP")," - comiled regex for back half"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FULL_ENV_PATTERN")," - full regex pattern"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FULL_REGEX_OP")," - compiled regex for full regex"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_salt")," - current cryptographic salt"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_key")," - current cryptographic key")),(0,a.kt)("h4",{id:"__init__-2"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(salt: str, key: ByteString)\n")),(0,a.kt)("p",null,"Init for CryptoResolver"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"salt")," - cryptographic salt to use"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key")," - cryptographic key to use")))}k.isMDXComponent=!0}}]);