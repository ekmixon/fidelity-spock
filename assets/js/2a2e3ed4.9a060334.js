"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[2846],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),f=o,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||i;return t?a.createElement(m,r(r({ref:n},c),{},{components:t})):a.createElement(m,r({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3785:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var a=t(7462),o=t(3366),i=(t(7294),t(3905)),r=["components"],s={},l="S3 Support",p={unversionedId:"addons/S3",id:"addons/S3",isDocsHomePage:!1,title:"S3 Support",description:"When installed with the S3 addon spock will attempt to identify S3 URI(s) (e.g. s3:///) and handle",source:"@site/docs/addons/S3.md",sourceDirName:"addons",slug:"/addons/S3",permalink:"/addons/S3",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/addons/S3.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Utilizing Command Line Overrides",permalink:"/advanced_features/Command-Line-Overrides"},next:{title:"Hyper-Parameter Tuning Support",permalink:"/addons/tuner/About"}},c=[{value:"Installing",id:"installing",children:[]},{value:"Creating a boto3 Session",id:"creating-a-boto3-session",children:[]},{value:"Using the S3Config Object",id:"using-the-s3config-object",children:[]},{value:"Defining the configuration file with a S3 URI",id:"defining-the-configuration-file-with-a-s3-uri",children:[]},{value:"Saving to a S3 URI",id:"saving-to-a-s3-uri",children:[]},{value:"S3Transfer ExtraArgs",id:"s3transfer-extraargs",children:[]}],d={toc:c};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"s3-support"},"S3 Support"),(0,i.kt)("p",null,"When installed with the S3 addon ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," will attempt to identify S3 URI(s) (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"s3://<bucket-name>/<key>"),") and handle\nthem automatically. The user only needs to provide an active ",(0,i.kt)("inlineCode",{parentName:"p"},"boto3.session.Session")," to an ",(0,i.kt)("inlineCode",{parentName:"p"},"S3Config")," object and pass\nit to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigArgBuilder"),"."),(0,i.kt)("h3",{id:"installing"},"Installing"),(0,i.kt)("p",null,"Install ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," with the extra s3 related dependencies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install spock-config[s3]\n")),(0,i.kt)("h3",{id:"creating-a-boto3-session"},"Creating a boto3 Session"),(0,i.kt)("p",null,"The user must provide an active ",(0,i.kt)("inlineCode",{parentName:"p"},"boto3.session.Session")," object to ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," in order for the library to automatically\nhandle S3 URI(s). Configuration is ",(0,i.kt)("strong",{parentName:"p"},"highly dependent")," upon your current AWS setup/security. Please refer to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"boto3")," docs for ",(0,i.kt)("a",{parentName:"p",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html"},"session")," and\n",(0,i.kt)("a",{parentName:"p",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html"},"credentials")," for help on how to\ncorrectly configure your ",(0,i.kt)("inlineCode",{parentName:"p"},"boto3.session.Session"),"."),(0,i.kt)("p",null,"For instance, let's just suppose we are going to get our tokens via SAML authorization\nwhere we already have the SAMLAssertion, RoleArn, and PrincipalArn stored as env variables:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import boto3\nimport os\n\nclient = boto3.client('sts')\n\ntoken = client.assume_role_with_saml(\n    RoleArn=os.environ.get(\"RoleArn\"), PrincipalArn=os.environ.get(\"PrincipalArn\"),\n    SAMLAssertion=os.environ.get(\"SamlString\")\n)\n\ncredentials = token['Credentials']\n\nsession = boto3.Session(\n            aws_access_key_id=credentials['AccessKeyId'],\n            aws_secret_access_key=credentials['SecretAccessKey'],\n            aws_session_token=credentials['SessionToken'],\n            region_name=os.environ.get('AWS_REGION'))\n")),(0,i.kt)("h3",{id:"using-the-s3config-object"},"Using the S3Config Object"),(0,i.kt)("p",null,"As an example let's create a basic ",(0,i.kt)("inlineCode",{parentName:"p"},"@spock")," decorated class, instantiate a ",(0,i.kt)("inlineCode",{parentName:"p"},"S3Config")," object from ",(0,i.kt)("inlineCode",{parentName:"p"},"spock.addons.s3")," with\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"boto3.session.Session")," we created above, and pass it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigArgBuilder"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from spock.addons.s3 import S3Config\nfrom spock.builder import ConfigArgBuilder\nfrom spock.config import spock\nfrom typing import List\n\n@spock\nclass BasicConfig:\n    """Basic spock configuration for example purposes\n\n    Attributes:\n        parameter: simple boolean that flags rounding\n        fancy_parameter: parameter that multiplies a value\n        fancier_parameter: parameter that gets added to product of val and fancy_parameter\n        most_fancy_parameter: values to apply basic algebra to\n\n    """\n    parameter: bool\n    fancy_parameter: float\n    fancier_parameter: float\n    most_fancy_parameter: List[int]\n\ndef main():\n    # Create an S3Config object and pass in the boto3 session\n    s3_config = S3Config(\n        session=session\n    )\n    # Chain the generate function to the ConfigArgBuilder call\n    # Pass in the S3Config object\n    config = ConfigArgBuilder(\n        BasicConfig, \n        desc=\'S3 example\',\n        s3_config=s3_config\n    ).generate()\n')),(0,i.kt)("h3",{id:"defining-the-configuration-file-with-a-s3-uri"},"Defining the configuration file with a S3 URI"),(0,i.kt)("p",null,"Usually we pass a relative or absolute system path as the configuration file command line argument. Here we pass\nin a S3 URI instead:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ python simple.py -c s3://my-bucket/path/to/file/config.yaml\n")),(0,i.kt)("p",null,"With a ",(0,i.kt)("inlineCode",{parentName:"p"},"S3Config")," object passed into the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigArgBuilder")," the S3 URI will automatically be handled by ",(0,i.kt)("inlineCode",{parentName:"p"},"spock"),"."),(0,i.kt)("h3",{id:"saving-to-a-s3-uri"},"Saving to a S3 URI"),(0,i.kt)("p",null,"Similarly, we usually pass a relative or absolute system path to the ",(0,i.kt)("inlineCode",{parentName:"p"},"SavePath")," special argument type or\nto the ",(0,i.kt)("inlineCode",{parentName:"p"},"user_specified_path")," kwarg. Again, instead we give a S3 URI:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def main():\n    # Create an S3Config object and pass in the boto3 session\n    s3_config = S3Config(\n        session=session\n    )\n    # Chain the generate function to the ConfigArgBuilder call\n    # Pass in the S3Config object\n    config = ConfigArgBuilder(\n        BasicConfig, \n        desc='S3 example',\n        s3_config=s3_config\n    ).save(user_specified_path=\"s3://my-bucket/path/to/file/\").generate()\n")),(0,i.kt)("p",null,"With a ",(0,i.kt)("inlineCode",{parentName:"p"},"S3Config")," object passed into the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigArgBuilder")," the S3 URI will automatically be handled by ",(0,i.kt)("inlineCode",{parentName:"p"},"spock"),"."),(0,i.kt)("h3",{id:"s3transfer-extraargs"},"S3Transfer ExtraArgs"),(0,i.kt)("p",null,"If you require any other settings for uploading or downloading files from S3 the ",(0,i.kt)("inlineCode",{parentName:"p"},"S3Config")," class has two extra\nattributes:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"download_config")," which takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"S3DownloadConfig")," object from ",(0,i.kt)("inlineCode",{parentName:"p"},"spock.addons.s3")," which supports all ExtraArgs from\n",(0,i.kt)("a",{parentName:"p",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/customizations/s3.html#boto3.s3.transfer.S3Transfer.ALLOWED_DOWNLOAD_ARGS"},"S3Transfer.ALLOWED_DOWNLOAD_ARGS")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"upload_config")," which takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"S3UploadConfig")," object from ",(0,i.kt)("inlineCode",{parentName:"p"},"spock.addons.s3")," which supports all ExtraArgs from\n",(0,i.kt)("a",{parentName:"p",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/customizations/s3.html#boto3.s3.transfer.S3Transfer.ALLOWED_UPLOAD_ARGS"},"S3Transfer.ALLOWED_UPLOAD_ARGS")))}u.isMDXComponent=!0}}]);