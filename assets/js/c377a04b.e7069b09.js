"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[6971],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1269:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={slug:"/",title:"Home"},s=void 0,p={unversionedId:"index",id:"index",isDocsHomePage:!1,title:"Home",description:"Managing complex configurations any other way would be highly illogical...",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/spock/",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/index.md",tags:[],version:"current",frontMatter:{slug:"/",title:"Home"},sidebar:"docs",next:{title:"Installation",permalink:"/spock/Installation"}},c=[{value:"About",id:"about",children:[]},{value:"\ud83d\udca5 Why You Should Use Spock \ud83d\udca5",id:"-why-you-should-use-spock-",children:[]},{value:"Key Features",id:"key-features",children:[]},{value:"Quick Install",id:"quick-install",children:[]},{value:"News/Releases",id:"newsreleases",children:[]},{value:"Original Implementation",id:"original-implementation",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{align:"center"},(0,r.kt)("a",{href:"https://fidelity.github.io/spock/"},(0,r.kt)("img",{src:"https://raw.githubusercontent.com/fidelity/spock/master/resources/images/logo.png"})),(0,r.kt)("h6",{align:"center"},"Managing complex configurations any other way would be highly illogical...")),(0,r.kt)("p",{align:"center"},(0,r.kt)("a",{href:"https://opensource.org/licenses/Apache-2.0"},(0,r.kt)("img",{src:"https://img.shields.io/badge/License-Apache%202.0-9cf"})),(0,r.kt)("a",{href:"https://bestpractices.coreinfrastructure.org/projects/5551"},(0,r.kt)("img",{src:"https://bestpractices.coreinfrastructure.org/projects/5551/badge"})),(0,r.kt)("a",null,(0,r.kt)("img",{src:"https://img.shields.io/badge/python-3.6+-informational.svg"})),(0,r.kt)("a",{href:"https://github.com/psf/black"},(0,r.kt)("img",{src:"https://img.shields.io/badge/code%20style-black-000000.svg"})),(0,r.kt)("a",{href:"https://badge.fury.io/py/spock-config"},(0,r.kt)("img",{src:"https://badge.fury.io/py/spock-config.svg"})),(0,r.kt)("a",{href:"https://coveralls.io/github/fidelity/spock?branch=master"},(0,r.kt)("img",{src:"https://coveralls.io/repos/github/fidelity/spock/badge.svg?branch=master"})),(0,r.kt)("a",null,(0,r.kt)("img",{src:"https://github.com/fidelity/spock/workflows/pytest/badge.svg?branch=master"})),(0,r.kt)("a",null,(0,r.kt)("img",{src:"https://github.com/fidelity/spock/workflows/docs/badge.svg"}))),(0,r.kt)("h3",{align:"center"},(0,r.kt)("a",{href:"https://fidelity.github.io/spock/Quick-Start"},"Quick Start"),(0,r.kt)("span",null," \xb7 "),(0,r.kt)("a",{href:"https://fidelity.github.io/spock/"},"Documentation"),(0,r.kt)("span",null," \xb7 "),(0,r.kt)("a",{href:"https://github.com/fidelity/spock/blob/master/examples"},"Examples"),(0,r.kt)("span",null," \xb7 "),(0,r.kt)("a",{href:"https://github.com/fidelity/spock/releases"},"Releases")),(0,r.kt)("h2",{id:"about"},"About"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spock")," is a framework that helps users easily define, manage, and use complex parameter configurations within Python\napplications. It lets you focus on the code you need to write instead of re-implementing boilerplate code such as\ncreating ArgParsers, reading configuration files, handling dependencies, type validation, implementing traceability etc."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spock")," configurations are normal python classes that are decorated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@spock"),". It supports\ninheritance, dynamic class dependencies, loading/saving configurations from/to multiple markdown formats, automatically\ngenerating CLI arguments, and hierarchical configuration by composition."),(0,r.kt)("h2",{id:"-why-you-should-use-spock-"},"\ud83d\udca5 Why You Should Use Spock \ud83d\udca5"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Simple and organized parameter defintions (i.e. a single line)"),(0,r.kt)("li",{parentName:"ul"},"Statically type checked & frozen parameters (i.e. fail early during long ML training runs)"),(0,r.kt)("li",{parentName:"ul"},"Complex parameter dependencies made simple (i.e. ",(0,r.kt)("inlineCode",{parentName:"li"},"@spock")," class with a parameter that is an Enum of other\n",(0,r.kt)("inlineCode",{parentName:"li"},"@spock")," classes)"),(0,r.kt)("li",{parentName:"ul"},"Fully serializable parameter state (i.e. reproduce prior runtime parameter configurations)"),(0,r.kt)("li",{parentName:"ul"},"Automatic CLI generation without argparser boilerplate (i.e click or typer for free!)"),(0,r.kt)("li",{parentName:"ul"},"Unified hyper-parameter definitions (i.e. don't write different definitions for Ax or Optuna)")),(0,r.kt)("h2",{id:"key-features"},"Key Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fidelity.github.io/spock/basics/Define"},"Simple Declaration"),": Type checked parameters are\ndefined within a ",(0,r.kt)("inlineCode",{parentName:"li"},"@spock")," decorated class. Supports required/optional and automatic defaults."),(0,r.kt)("li",{parentName:"ul"},"Easily Managed Parameter Groups: Each class automatically generates its own object within a single namespace."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fidelity.github.io/spock/advanced_features/Inheritance"},"Parameter Inheritance"),": Classes support\ninheritance (w/ lazy evaluation of inheritance/dependencies) allowing for complex configurations derived from\na common base set of parameters."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fidelity.github.io/spock/advanced_features/Advanced-Types/"},"Complex Types"),": Nested Lists/Tuples,\nList/Tuples of Enum of ",(0,r.kt)("inlineCode",{parentName:"li"},"@spock")," classes, List of repeated ",(0,r.kt)("inlineCode",{parentName:"li"},"@spock")," classes"),(0,r.kt)("li",{parentName:"ul"},"Multiple Configuration File Types: Configurations are specified from YAML, TOML, or JSON files."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fidelity.github.io/spock/advanced_features/Composition/"},"Hierarchical Configuration"),": Compose from\nmultiple configuration files via simple include statements."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fidelity.github.io/spock/advanced_features/Command-Line-Overrides/"},"Command-Line Overrides"),": Quickly\nexperiment by overriding a value with automatically generated command line arguments."),(0,r.kt)("li",{parentName:"ul"},"Immutable: All classes are ",(0,r.kt)("em",{parentName:"li"},"frozen")," preventing any misuse or accidental overwrites (to the extent they can be in\nPython)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fidelity.github.io/spock/basics/Saving"},"Tractability and Reproducibility"),": Save runtime\nparameter configuration to YAML, TOML, or JSON with a single chained command (with extra runtime info such as Git info,\nPython version, machine FQDN, etc). The saved markdown file can be used as the configuration input to reproduce\nprior runtime configurations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fidelity.github.io/spock/addons/tuner/About"},"Hyper-Parameter Tuner Addon"),": Provides a unified\ninterface for defining hyper-parameters (via ",(0,r.kt)("inlineCode",{parentName:"li"},"@spockTuner")," decorator) that supports various tuning/algorithm\nbackends (currently: Optuna, Ax)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://fidelity.github.io/spock/addons/S3"},"S3 Addon"),": Automatically detects ",(0,r.kt)("inlineCode",{parentName:"li"},"s3://")," URI(s) and handles loading\nand saving ",(0,r.kt)("inlineCode",{parentName:"li"},"spock")," configuration files when an active ",(0,r.kt)("inlineCode",{parentName:"li"},"boto3.Session")," is passed in (plus any additional\n",(0,r.kt)("inlineCode",{parentName:"li"},"S3Transfer")," configurations)")),(0,r.kt)("h2",{id:"quick-install"},"Quick Install"),(0,r.kt)("p",null,"The basic install and ",(0,r.kt)("inlineCode",{parentName:"p"},"[s3]")," extension require Python 3.6+ while the ",(0,r.kt)("inlineCode",{parentName:"p"},"[tune]")," extension requires Python 3.7+"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Base"),(0,r.kt)("th",{parentName:"tr",align:null},"w/ S3 Extension"),(0,r.kt)("th",{parentName:"tr",align:null},"w/ Hyper-Parameter Tuner"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pip install spock-config")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pip install spock-config[s3]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"pip install spock-config[tune]"))))),(0,r.kt)("h2",{id:"newsreleases"},"News/Releases"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/fidelity/spock/releases"},"Releases")," for more information."),(0,r.kt)("h2",{id:"features"},"Recent Changes"),(0,r.kt)("h4",{id:"january-18th-2022"},"January 18th, 2022"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Support for lazy evaluation: (1) inherited classes do not need to be ",(0,r.kt)("inlineCode",{parentName:"li"},"@spock")," decorated, (2) dependencies/references\nbetween ",(0,r.kt)("inlineCode",{parentName:"li"},"spock")," classes can be lazily handled thus preventing the need for every ",(0,r.kt)("inlineCode",{parentName:"li"},"@spock")," decorated classes to be\npassed into ",(0,r.kt)("inlineCode",{parentName:"li"},"*args")," within the main ",(0,r.kt)("inlineCode",{parentName:"li"},"SpockBuilder")," API"),(0,r.kt)("li",{parentName:"ul"},"Updated main API interface for better top-level imports (backwards compatible): ",(0,r.kt)("inlineCode",{parentName:"li"},"ConfigArgBuilder"),"->",(0,r.kt)("inlineCode",{parentName:"li"},"spockBuilder")),(0,r.kt)("li",{parentName:"ul"},"Added stubs to the underlying decorator that should help with type hinting in VSCode (pylance/pyright)")),(0,r.kt)("h4",{id:"december-14-2021"},"December 14, 2021"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Refactored the backend to better handle nested dependencies (and for clarity)"),(0,r.kt)("li",{parentName:"ul"},"Refactored the docs to use Docusaurus")),(0,r.kt)("h4",{id:"august-17-2021"},"August 17, 2021"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Added hyper-parameter tuning backend support for Ax via Service API")),(0,r.kt)("h2",{id:"original-implementation"},"Original Implementation"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spock")," was originally developed by the ",(0,r.kt)("strong",{parentName:"p"},"Artificial Intelligence Center of Excellence at Fidelity Investments")," by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ncilfone"},"Nicholas Cilfone")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/sidnarayanan"},"Siddharth Narayanan")))}d.isMDXComponent=!0}}]);