"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[1074],{3905:function(e,a,t){t.d(a,{Zo:function(){return d},kt:function(){return k}});var n=t(7294);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=n.createContext({}),s=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},d=function(e){var a=s(e.components);return n.createElement(p.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=s(t),k=l,m=c["".concat(p,".").concat(k)]||c[k]||u[k]||r;return t?n.createElement(m,i(i({ref:a},d),{},{components:t})):n.createElement(m,i({ref:a},d))}));function k(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=c;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1286:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return c}});var n=t(7462),l=t(3366),r=(t(7294),t(3905)),i=["components"],o={sidebar_label:"payload",title:"backend.payload"},p=void 0,s={unversionedId:"reference/backend/payload",id:"reference/backend/payload",isDocsHomePage:!1,title:"backend.payload",description:"Handles payloads from markup files",source:"@site/docs/reference/backend/payload.md",sourceDirName:"reference/backend",slug:"/reference/backend/payload",permalink:"/spock/reference/backend/payload",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/backend/payload.md",tags:[],version:"current",frontMatter:{sidebar_label:"payload",title:"backend.payload"},sidebar:"api",previous:{title:"help",permalink:"/spock/reference/backend/help"},next:{title:"saver",permalink:"/spock/reference/backend/saver"}},d=[{value:"BasePayload Objects",id:"basepayload-objects",children:[]},{value:"AttrPayload Objects",id:"attrpayload-objects",children:[]}],u={toc:d};function c(e){var a=e.components,t=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Handles payloads from markup files"),(0,r.kt)("h2",{id:"basepayload-objects"},"BasePayload Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class BasePayload(BaseHandler)\n")),(0,r.kt)("p",null,"Handles building the payload for config file(s)"),(0,r.kt)("p",null,"This class builds out the payload from config files of multiple types. It handles various\nfile types and also composition of config files via recursive calls"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_loaders")," - maps of each file extension to the loader class"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__s3_config")," - optional S3Config object to handle s3 access")),(0,r.kt)("h4",{id:"_update_payload"},"_","update","_","payload"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\n@abstractmethod\ndef _update_payload(base_payload, input_classes, ignore_classes, payload)\n")),(0,r.kt)("p",null,"Updates the payload"),(0,r.kt)("p",null,"Checks the parameters defined in the config files against the provided classes and if\npassable adds them to the payload"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"base_payload")," - current payload"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_classes")," - class to roll into"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ignore_classes")," - list of classes to ignore"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - total payload")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - updated payload")),(0,r.kt)("h4",{id:"payload"},"payload"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def payload(input_classes, ignore_classes, path, cmd_args, deps)\n")),(0,r.kt)("p",null,"Builds the payload from config files"),(0,r.kt)("p",null,"Public exposed call to build the payload and set any command line overrides"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_classes")," - list of backend classes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ignore_classes")," - list of classes to ignore"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to config file(s)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cmd_args")," - command line overrides"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deps")," - dictionary of config dependencies")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - dictionary of all mapped parameters")),(0,r.kt)("h4",{id:"_payload"},"_","payload"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _payload(input_classes, ignore_classes, path, deps, root=False)\n")),(0,r.kt)("p",null,"Private call to construct the payload"),(0,r.kt)("p",null,"Main function call that builds out the payload from config files of multiple types. It handles\nvarious file types and also composition of config files via a recursive calls"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_classes")," - list of backend classes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ignore_classes")," - list of classes to ignore"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to config file(s)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deps")," - dictionary of config dependencies")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - dictionary of all mapped parameters")),(0,r.kt)("h4",{id:"_handle_dependencies"},"_","handle","_","dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _handle_dependencies(deps, path, root)\n")),(0,r.kt)("p",null,"Handles config file dependencies"),(0,r.kt)("p",null,"Checks to see if the config path (full or relative) has already been encountered. Essentially a DFS for graph\ncycles"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deps")," - dictionary of config dependencies"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - current config path"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"root")," - boolean if root")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deps")," - updated dependencies")),(0,r.kt)("h4",{id:"_handle_includes"},"_","handle","_","includes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _handle_includes(base_payload, config_extension, input_classes, ignore_classes, path: Path, payload, deps)\n")),(0,r.kt)("p",null,"Handles config composition"),(0,r.kt)("p",null,"For all of the config tags in the config file this function will recursively call the payload function\nwith the composition path to get the additional payload(s) from the composed file(s) -- checks for file\nvalidity or if it is an S3 URI via regex"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"base_payload")," - base payload that has a config kwarg"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config_extension")," - file type"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"input_classes")," - defined backend classes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ignore_classes")," - list of classes to ignore"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," - path to base file"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - payload pulled from composed files"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deps")," - dictionary of config dependencies")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - payload update from composed files")),(0,r.kt)("h4",{id:"_handle_overrides"},"_","handle","_","overrides"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def _handle_overrides(payload, ignore_classes, args)\n")),(0,r.kt)("p",null,"Handle command line overrides"),(0,r.kt)("p",null,"Iterate through the command line override values, determine at what level to set them, and set them if possible"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - current payload dictionary"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," - command line override args")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - updated payload dictionary with override values set")),(0,r.kt)("h4",{id:"_prune_args"},"_","prune","_","args"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _prune_args(args, ignore_classes)\n")),(0,r.kt)("p",null,"Prunes ignored class names from the cmd line args list to prevent incorrect access"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," - current cmd line args"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ignore_classes")," - list of class names to ignore")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  dictionary of pruned cmd line args"),(0,r.kt)("h4",{id:"_handle_payload_override"},"_","handle","_","payload","_","override"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\n@abstractmethod\ndef _handle_payload_override(payload, key, value)\n")),(0,r.kt)("p",null,"Handles the complex logic needed for List","[spock class]"," overrides"),(0,r.kt)("p",null,"Messy logic that sets overrides for the various different types. The hardest being List","[spock class]"," since str\nnames have to be mapped backed to sys.modules and can be set at either the general or class level."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - current payload dictionary"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - current arg key"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," - value at current arg key")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - modified payload with overrides")),(0,r.kt)("h2",{id:"attrpayload-objects"},"AttrPayload Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class AttrPayload(BasePayload)\n")),(0,r.kt)("p",null,"Handles building the payload for attrs backend"),(0,r.kt)("p",null,"This class builds out the payload from config files of multiple types. It handles various\nfile types and also composition of config files via a recursive calls"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"_loaders")," - maps of each file extension to the loader class")),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(s3_config=None)\n")),(0,r.kt)("p",null,"Init for AttrPayload"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"s3_config")," - optional S3 config object")),(0,r.kt)("h4",{id:"__call__"},"_","_","call","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __call__(*args, **kwargs)\n")),(0,r.kt)("p",null,"Call to allow self chaining"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("p",null,"  *args:\n**kwArgs:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Payload")," - instance of self")),(0,r.kt)("h4",{id:"_handle_payload_override-1"},"_","handle","_","payload","_","override"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _handle_payload_override(payload, key, value)\n")),(0,r.kt)("p",null,"Handles the complex logic needed for List","[spock class]"," overrides"),(0,r.kt)("p",null,"Messy logic that sets overrides for the various different types. The hardest being List","[spock class]"," since str\nnames have to be mapped backed to sys.modules and can be set at either the general or class level."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - current payload dictionary"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," - current arg key"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," - value at current arg key")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"payload")," - modified payload with overrides")))}c.isMDXComponent=!0}}]);