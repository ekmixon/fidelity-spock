"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[2284],{3905:function(e,r,n){n.d(r,{Zo:function(){return s},kt:function(){return m}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=t.createContext({}),c=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},s=function(e){var r=c(e.components);return t.createElement(u.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return n?t.createElement(f,i(i({ref:r},s),{},{components:n})):t.createElement(f,i({ref:r},s))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},689:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var t=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_label:"builder",title:"addons.tune.builder"},u=void 0,c={unversionedId:"reference/addons/tune/builder",id:"reference/addons/tune/builder",isDocsHomePage:!1,title:"addons.tune.builder",description:"Handles the tuner builder backend",source:"@site/docs/reference/addons/tune/builder.md",sourceDirName:"reference/addons/tune",slug:"/reference/addons/tune/builder",permalink:"/spock/reference/addons/tune/builder",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/addons/tune/builder.md",tags:[],version:"current",frontMatter:{sidebar_label:"builder",title:"addons.tune.builder"},sidebar:"api",previous:{title:"ax",permalink:"/spock/reference/addons/tune/ax"},next:{title:"config",permalink:"/spock/reference/addons/tune/config"}},s=[{value:"TunerBuilder Objects",id:"tunerbuilder-objects",children:[]}],d={toc:s};function p(e){var r=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Handles the tuner builder backend"),(0,o.kt)("h2",{id:"tunerbuilder-objects"},"TunerBuilder Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class TunerBuilder(BaseBuilder)\n")),(0,o.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(*args, **kwargs)\n")),(0,o.kt)("p",null,"TunerBuilder init"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"*args")," - list of input classes that link to a backend"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"configs")," - None or List of configs to read from"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"desc")," - description for the arg parser"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"no_cmd_line")," - flag to force no command line reads"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"**kwargs")," - any extra keyword args")),(0,o.kt)("h4",{id:"_make_group_override_parser"},"_","make","_","group","_","override","_","parser"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _make_group_override_parser(parser, class_obj, class_name)\n")),(0,o.kt)("p",null,"Makes a name specific override parser for a given class obj"),(0,o.kt)("p",null,"Takes a class object of the backend and adds a new argument group with argument names given with name\nClass.val.(unrolled config parameters) so that individual parameters specific to a class can be overridden."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Args"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"parser: argument parser\nclass_obj: instance of a backend class\nclass_name: used for module matching\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Returns"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"parser: argument parser with new class specific overrides\n")))}p.isMDXComponent=!0}}]);