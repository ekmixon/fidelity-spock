"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[809],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4676:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={},l="Ax Support",p={unversionedId:"addons/tuner/Ax",id:"addons/tuner/Ax",isDocsHomePage:!1,title:"Ax Support",description:"spock integrates with the Ax optimization framework through the provided Service API. See",source:"@site/docs/addons/tuner/Ax.md",sourceDirName:"addons/tuner",slug:"/addons/tuner/Ax",permalink:"/spock/addons/tuner/Ax",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/addons/tuner/Ax.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Tune Basics",permalink:"/spock/addons/tuner/Basics"},next:{title:"Optuna Support",permalink:"/spock/addons/tuner/Optuna"}},c=[{value:"Defining the Backend",id:"defining-the-backend",children:[]},{value:"Generate Functionality Still Exists",id:"generate-functionality-still-exists",children:[]},{value:"Sample as an Alternative to Generate",id:"sample-as-an-alternative-to-generate",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ax-support"},"Ax Support"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"spock")," integrates with the Ax optimization framework through the provided Service API. See\n",(0,i.kt)("a",{parentName:"p",href:"https://ax.dev/api/service.html#module-ax.service.ax_client"},"docs")," for ",(0,i.kt)("inlineCode",{parentName:"p"},"AxClient")," info."),(0,i.kt)("p",null,"All examples can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/fidelity/spock/blob/master/examples"},"here"),"."),(0,i.kt)("h3",{id:"defining-the-backend"},"Defining the Backend"),(0,i.kt)("p",null,"So let's continue with our Ax specific version of ",(0,i.kt)("inlineCode",{parentName:"p"},"tune.py"),":"),(0,i.kt)("p",null,"It's important to note that you can still use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@spock")," decorator to define any non hyper-parameters! For\nposterity let's add some fixed parameters (those that are not part of hyper-parameter tuning) that we will use\nelsewhere in our code. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from spock.config import spock\n\n@spock\nclass BasicParams:\n    n_trials: int\n    max_iter: int\n")),(0,i.kt)("p",null,"Now we need to tell ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," that we intend on doing hyper-parameter tuning and which backend we would like to use. We\ndo this by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"tuner")," method on the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigArgBuilder")," object passing in a configuration object for the\nbackend of choice (just like in basic functionality this is a chained command, thus the builder object will still be\nreturned). For Ax one uses ",(0,i.kt)("inlineCode",{parentName:"p"},"AxTunerConfig"),". This config mirrors all options that would be passed into\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"AxClient")," constructor and the ",(0,i.kt)("inlineCode",{parentName:"p"},"AxClient.create_experiment"),"function call so that ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," can setup the\nService API. (Note: The ",(0,i.kt)("inlineCode",{parentName:"p"},"@spockTuner"),"decorated classes are passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConfigArgBuilder")," in the exact same\nway as basic ",(0,i.kt)("inlineCode",{parentName:"p"},"@spock"),"decorated classes.)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from spock.addons.tune import AxTunerConfig\n\n# Ax config -- this will internally spawn the AxClient service API style which will be returned\n# by accessing the tuner_status property on the ConfigArgBuilder object -- note here that we need to define the\n# objective name that the client will expect to be within the data dictionary when completing trials \nax_config = AxTunerConfig(objective_name="accuracy", minimize=False)\n\n# Use the builder to setup\n# Call tuner to indicate that we are going to do some HP tuning -- passing in an ax study object\nattrs_obj = ConfigArgBuilder(\n    LogisticRegressionHP,\n    BasicParams,\n    desc="Example Logistic Regression Hyper-Parameter Tuning -- Ax Backend",\n).tuner(tuner_config=ax_config)\n\n')),(0,i.kt)("h3",{id:"generate-functionality-still-exists"},"Generate Functionality Still Exists"),(0,i.kt)("p",null,"To get the set of fixed parameters (those that are not hyper-parameters) one simply calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"generate()")," function\njust like they would for normal ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," usage to get the fixed parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"spockspace"),". "),(0,i.kt)("p",null,"Continuing in ",(0,i.kt)("inlineCode",{parentName:"p"},"tune.py"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"\n# Here we need some of the fixed parameters first so we can just call the generate fnc to grab all the fixed params\n# prior to starting the sampling process\nfixed_params = attrs_obj.generate()\n")),(0,i.kt)("h3",{id:"sample-as-an-alternative-to-generate"},"Sample as an Alternative to Generate"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sample()")," call is the crux of ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," hyper-parameter tuning support. It draws a hyper-parameter sample from the\nunderlying backend sampler and combines it with fixed parameters and returns a single ",(0,i.kt)("inlineCode",{parentName:"p"},"Spockspace")," with all\nuseable parameters (defined with dot notation). For Ax -- Under the hood ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," uses the Service API (with\nan ",(0,i.kt)("inlineCode",{parentName:"p"},"AxClient"),") -- thus it handles the underlying call to get the next trial. The ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," builder object has a\n",(0,i.kt)("inlineCode",{parentName:"p"},"@property")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"tuner_status")," that returns any necessary backend objects in a dictionary that the user needs to\ninterface with. In the case of Ax, this contains both the ",(0,i.kt)("inlineCode",{parentName:"p"},"AxClient")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"trial_index")," (as dictionary keys). We use\nthe return of",(0,i.kt)("inlineCode",{parentName:"p"},"tuner_status")," to handle trial completion via the ",(0,i.kt)("inlineCode",{parentName:"p"},"complete_trial")," call based on the metric of interested\n(here just the simple validation accuracy -- remember during ",(0,i.kt)("inlineCode",{parentName:"p"},"AxTunerConfig")," instantiation we set the ",(0,i.kt)("inlineCode",{parentName:"p"},"objective_name"),"\nto 'accuracy' -- we also set the SEM to 0.0 since we are not using it for this example)"),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://ax.dev/api/service.html#ax.service.ax_client.AxClient.complete_trial"},"here")," for Ax documentation on\ncompleting trials."),(0,i.kt)("p",null,"Continuing in ",(0,i.kt)("inlineCode",{parentName:"p"},"tune.py"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# Iterate through a bunch of ax trials\nfor _ in range(fixed_params.BasicParams.n_trials):\n        # Call sample on the spock object \n        hp_attrs = attrs_obj.sample()\n        # Use the currently sampled parameters in a simple LogisticRegression from sklearn\n        clf = LogisticRegression(\n            C=hp_attrs.LogisticRegressionHP.c,\n            solver=hp_attrs.LogisticRegressionHP.solver,\n            max_iter=hp_attrs.BasicParams.max_iter\n        )\n        clf.fit(X_train, y_train)\n        val_acc = clf.score(X_valid, y_valid)\n        # Get the status of the tuner -- this dict will contain all the objects needed to update\n        tuner_status = attrs_obj.tuner_status\n        # Pull the AxClient object and trial index out of the return dictionary and call \'complete_trial\' on the\n        # AxClient object with the correct raw_data that contains the objective name\n        tuner_status["client"].complete_trial(\n            trial_index=tuner_status["trial_index"],\n            raw_data={"accuracy": (val_acc, 0.0)},\n        )\n')))}d.isMDXComponent=!0}}]);