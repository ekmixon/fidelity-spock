"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[2195],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=d(t),f=a,g=u["".concat(s,".").concat(f)]||u[f]||p[f]||o;return t?r.createElement(g,i(i({ref:n},l),{},{components:t})):r.createElement(g,i({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},567:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return l},default:function(){return u}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],c={},s="Keyword Configs",d={unversionedId:"advanced_features/Keyword-Configs",id:"advanced_features/Keyword-Configs",isDocsHomePage:!1,title:"Keyword Configs",description:"spock supports adding and/or overriding the config file path(s) normally specified via the command line argument -c",source:"@site/docs/advanced_features/Keyword-Configs.md",sourceDirName:"advanced_features",slug:"/advanced_features/Keyword-Configs",permalink:"/spock/advanced_features/Keyword-Configs",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/advanced_features/Keyword-Configs.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Local Definitions",permalink:"/spock/advanced_features/Local-Definitions"},next:{title:"Utilizing Command Line Overrides",permalink:"/spock/advanced_features/Command-Line-Overrides"}},l=[{value:"Specifying The Config Keyword Argument",id:"specifying-the-config-keyword-argument",children:[]},{value:"Specifying The Config Keyword Argument &amp; The No Command Line Flag",id:"specifying-the-config-keyword-argument--the-no-command-line-flag",children:[]}],p={toc:l};function u(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"keyword-configs"},"Keyword Configs"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"spock")," supports adding and/or overriding the config file path(s) normally specified via the command line argument ",(0,o.kt)("inlineCode",{parentName:"p"},"-c"),"\nwith keyword arguments."),(0,o.kt)("h3",{id:"specifying-the-config-keyword-argument"},"Specifying The Config Keyword Argument"),(0,o.kt)("p",null,"Let's pass in the ",(0,o.kt)("inlineCode",{parentName:"p"},"yaml")," configuration file via the config keyword argument instead of at the command line. Simply\nadd the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," keyword argument to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigArgBuilder"),". Note: This is not the recommended best practice as it\ncreates a dependency between code and configuration files. Please use the ",(0,o.kt)("inlineCode",{parentName:"p"},"-c")," command line argument whenever possible.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," keyword arg should be used ",(0,o.kt)("em",{parentName:"p"},"ONLY")," when necessary."),(0,o.kt)("p",null,"Editing our definition in: ",(0,o.kt)("inlineCode",{parentName:"p"},"tutorial.py")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"...\n\ndef main():\n    # A simple description\n    description = 'spock Advanced Tutorial'\n    # Build out the parser by passing in Spock config objects as *args after description\n    config = ConfigArgBuilder(ModelConfig, DataConfig, SGDConfig, desc=description, config=['./tutorial.yaml']).generate()\n    # Instantiate our neural net using\n    basic_nn = BasicNet(model_config=config.ModelConfig)\n    # Make some random data (BxH): H has dim of features in\n    x_data = torch.rand(config.DataConfig.n_samples, config.ModelConfig.n_features)\n    y_data = torch.randint(0, 3, (config.DataConfig.n_samples,))\n    # Run some training\n    train(x_data, y_data, basic_nn, config.ModelConfig, config.DataConfig, config.SGDConfig)\n\n")),(0,o.kt)("p",null,"Now to run ",(0,o.kt)("inlineCode",{parentName:"p"},"tutorial.py")," we don't need to pass a command line argument:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ python tutorial.py\n")),(0,o.kt)("h3",{id:"specifying-the-config-keyword-argument--the-no-command-line-flag"},"Specifying The Config Keyword Argument & The No Command Line Flag"),(0,o.kt)("p",null,"So if the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," keyword arg is not recommended why do we support it? Mainly for two reasons:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Programmatic access to configuration files for other code/infrastructure (e.g. dispatching jobs from a work queue\nthat might need to be parametrized) "),(0,o.kt)("li",{parentName:"ul"},"To prevent command line arg clashes with other python code/libraries that might use the same or similar syntax (e.g.\nFastAPI)")),(0,o.kt)("p",null,"For instance, let's say we were wrapping our simple neural net example into an async REST API (using something\nlike ",(0,o.kt)("a",{parentName:"p",href:"https://fastapi.tiangolo.com/"},"FastAPI")," and a message queue such as redis). The FastAPI docker\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker"},"image")," has it's own set of command line arguments that get\ncalled and will clash with ",(0,o.kt)("inlineCode",{parentName:"p"},"spock"),". Therefore we need to pass the configuration file(s) through the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," keyword\nargument and deactivate the command line argument."),(0,o.kt)("p",null,"For instance, we create a route for our basic neural network (shown below). We add the ",(0,o.kt)("inlineCode",{parentName:"p"},"no_cmd_line=True")," flag to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigArgBuilder")," to prevent ",(0,o.kt)("inlineCode",{parentName:"p"},"spock")," from references command line arguments:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@api.post(\"/inference/\",  status_code=201)\ndef create_job(*, data: schemata.Inference):\n    # Build out the parser by passing in Spock config objects as *args after description\n    config = ConfigArgBuilder(ModelConfig, DataConfig, SGDConfig, desc=description, config=['./tutorial.yaml'], \n                              no_cmd_line=True).generate()\n    # Let's assume we have a model loading function based on our params\n    basic_nn = LoadBasicNet(model_config=config.ModelConfig)\n    # Make a prediction\n    y = basic_nn(data.x)\n    # Return the predictions\n    return_schema = schemata.InferenceReturn(\n        y=y,\n    )\n    return return_schema\n")))}u.isMDXComponent=!0}}]);