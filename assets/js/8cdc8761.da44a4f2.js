"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[2255],{3905:function(e,t,n){n.d(t,{Zo:function(){return i},kt:function(){return k}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},i=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),d=c(n),k=a,m=d["".concat(p,".").concat(k)]||d[k]||u[k]||l;return n?r.createElement(m,s(s({ref:t},i),{},{components:n})):r.createElement(m,s({ref:t},i))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<l;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5126:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return i},default:function(){return d}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),s=["components"],o={sidebar_label:"graph",title:"graph"},p=void 0,c={unversionedId:"reference/graph",id:"reference/graph",isDocsHomePage:!1,title:"graph",description:"Handles creation and ops for DAGs",source:"@site/docs/reference/graph.md",sourceDirName:"reference",slug:"/reference/graph",permalink:"/spock/reference/graph",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/graph.md",tags:[],version:"current",frontMatter:{sidebar_label:"graph",title:"graph"},sidebar:"api",previous:{title:"builder",permalink:"/spock/reference/builder"},next:{title:"handlers",permalink:"/spock/reference/handlers"}},i=[{value:"Graph Objects",id:"graph-objects",children:[]}],u={toc:i};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Handles creation and ops for DAGs"),(0,l.kt)("h2",{id:"graph-objects"},"Graph Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Graph()\n")),(0,l.kt)("p",null,"Class that holds graph methods for determining dependencies between spock classes"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_input_classes")," - list of input classes that link to a backend"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"_dag")," - graph of the dependencies between spock classes")),(0,l.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(input_classes)\n")),(0,l.kt)("p",null,"Init call for Graph class"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"input_classes")," - list of input classes that link to a backend")),(0,l.kt)("h4",{id:"nodes"},"nodes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef nodes()\n")),(0,l.kt)("p",null,"Returns the node names/input_classes"),(0,l.kt)("h4",{id:"roots"},"roots"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef roots()\n")),(0,l.kt)("p",null,"Returns the roots of the dependency graph"),(0,l.kt)("h4",{id:"_build"},"_","build"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _build()\n")),(0,l.kt)("p",null,"Builds a dictionary of nodes and their edges (essentially builds the DAG)"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  dictionary of nodes and their edges"),(0,l.kt)("h4",{id:"_find_all_spock_classes"},"_","find","_","all","_","spock","_","classes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _find_all_spock_classes(attr_class: Type)\n")),(0,l.kt)("p",null,"Within a spock class determine if there are any references to other spock classes"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"attr_class")," - a class with attrs attributes")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  list of dependent spock classes"),(0,l.kt)("h4",{id:"_check_4_spock_iterable"},"_","check","_","4","_","spock","_","iterable"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _check_4_spock_iterable(iter_obj: Union[tuple, list])\n")),(0,l.kt)("p",null,"Checks if an iterable type contains a spock class"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"iter_obj")," - iterable type")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  boolean if the iterable contains at least one spock class"),(0,l.kt)("h4",{id:"_get_enum_classes"},"_","get","_","enum","_","classes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _get_enum_classes(enum_obj: EnumMeta)\n")),(0,l.kt)("p",null,"Checks if any of the values of an enum are spock classes and adds to a list"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enum_obj")," - enum class")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  list of enum values that are spock classes"),(0,l.kt)("h4",{id:"_has_cycles"},"_","has","_","cycles"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _has_cycles()\n")),(0,l.kt)("p",null,"Uses DFS to check for cycles within the spock dependency graph"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  boolean if a cycle is found"),(0,l.kt)("h4",{id:"_cycle_dfs"},"_","cycle","_","dfs"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _cycle_dfs(node: Type, visited: dict, recursion_stack: dict)\n")),(0,l.kt)("p",null,"DFS via a recursion stack for cycles"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"node")," - current graph node (spock class type)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"visited")," - dictionary of visited nodes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"recursion_stack")," - dictionary that is the recursion stack that is used to find cycles")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("p",null,"  boolean if a cycle is found"))}d.isMDXComponent=!0}}]);