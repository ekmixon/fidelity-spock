"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[8458],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),f=r,k=u["".concat(i,".").concat(f)]||u[f]||d[f]||l;return n?a.createElement(k,o(o({ref:t},c),{},{components:n})):a.createElement(k,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3350:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],p={sidebar_label:"handlers",title:"handlers"},i=void 0,s={unversionedId:"reference/handlers",id:"reference/handlers",isDocsHomePage:!1,title:"handlers",description:"I/O handlers for various file formats",source:"@site/docs/reference/handlers.md",sourceDirName:"reference",slug:"/reference/handlers",permalink:"/spock/reference/handlers",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/handlers.md",tags:[],version:"current",frontMatter:{sidebar_label:"handlers",title:"handlers"},sidebar:"api",previous:{title:"graph",permalink:"/spock/reference/graph"},next:{title:"utils",permalink:"/spock/reference/utils"}},c=[{value:"Handler Objects",id:"handler-objects",children:[]},{value:"YAMLHandler Objects",id:"yamlhandler-objects",children:[]},{value:"TOMLHandler Objects",id:"tomlhandler-objects",children:[]},{value:"JSONHandler Objects",id:"jsonhandler-objects",children:[]}],d={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"I/O handlers for various file formats"),(0,l.kt)("h2",{id:"handler-objects"},"Handler Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class Handler(ABC)\n")),(0,l.kt)("p",null,"Base class for file type loaders"),(0,l.kt)("p",null,"ABC for loaders"),(0,l.kt)("h4",{id:"load"},"load"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def load(path: Path, s3_config=None) -> typing.Dict\n")),(0,l.kt)("p",null,"Load function for file type"),(0,l.kt)("p",null,"This handles s3 path conversion for all handler types pre load call"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"path: path to file\ns3_config: optional s3 config object if using s3 storage\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dictionary of read file\n")),(0,l.kt)("h4",{id:"_post_process_config_paths"},"_","post","_","process","_","config","_","paths"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _post_process_config_paths(payload)\n")),(0,l.kt)("p",null,"Transform path string into path object"),(0,l.kt)("h4",{id:"_load"},"_","load"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef _load(path: str) -> typing.Dict\n")),(0,l.kt)("p",null,"Private load function for file type"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"path: path to file\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"dictionary of read file\n")),(0,l.kt)("h4",{id:"save"},"save"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def save(out_dict: typing.Dict, info_dict: typing.Optional[typing.Dict], path: Path, name: str, create_path: bool = False, s3_config=None)\n")),(0,l.kt)("p",null,"Write function for file type"),(0,l.kt)("p",null,"This will handle local or s3 writes with the boolean is_s3 flag. If detected it will conditionally import\nthe necessary addons to handle the upload"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"out_dict: payload to write\ninfo_dict: info payload to write\npath: path to write out\nname: spock generated file name\ncreate_path: boolean to create the path if non-existent (for non S3)\ns3_config: optional s3 config object if using s3 storage\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("h4",{id:"_save"},"_","save"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef _save(out_dict: typing.Dict, info_dict: typing.Optional[typing.Dict], path: str) -> str\n")),(0,l.kt)("p",null,"Write function for file type"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"out_dict: payload to write\ninfo_dict: info payload to write\npath: path to write out\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("h4",{id:"_handle_possible_s3_load_path"},"_","handle","_","possible","_","s3","_","load","_","path"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _handle_possible_s3_load_path(path: Path, s3_config=None) -> typing.Union[str, Path]\n")),(0,l.kt)("p",null,"Handles the possibility of having to handle loading from a S3 path"),(0,l.kt)("p",null,"Checks to see if it detects a S3 uri and if so triggers imports of s3 functionality and handles the file\ndownload"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"path: spock config path\ns3_config: optional s3 configuration object\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"path: current path for the configuration file\n")),(0,l.kt)("h4",{id:"_handle_possible_s3_save_path"},"_","handle","_","possible","_","s3","_","save","_","path"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef _handle_possible_s3_save_path(path: Path, name: str, create_path: bool, s3_config=None) -> typing.Tuple[str, bool]\n")),(0,l.kt)("p",null,"Handles the possibility of having to save to a S3 path"),(0,l.kt)("p",null,"Checks to see if it detects a S3 uri and if so generates a tmp location to write the file to pre-upload"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"path: save path\nname: spock generated file name\ncreate_path: create the path for non s3 data\ns3_config: s3 config object\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("h4",{id:"write_extra_info"},"write","_","extra","_","info"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef write_extra_info(path, info_dict)\n")),(0,l.kt)("p",null,"Writes extra info to commented newlines"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"path: path to write out\ninfo_dict: info payload to write\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("h2",{id:"yamlhandler-objects"},"YAMLHandler Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class YAMLHandler(Handler)\n")),(0,l.kt)("p",null,"YAML class for loading YAML config files"),(0,l.kt)("p",null,"Base YAML class"),(0,l.kt)("h4",{id:"_load-1"},"_","load"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _load(path: str) -> typing.Dict\n")),(0,l.kt)("p",null,"YAML load function"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"path: path to YAML file\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"base_payload: dictionary of read file\n")),(0,l.kt)("h4",{id:"_save-1"},"_","save"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _save(out_dict: typing.Dict, info_dict: typing.Optional[typing.Dict], path: str)\n")),(0,l.kt)("p",null,"Write function for YAML type"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"out_dict: payload to write\ninfo_dict: info payload to write\npath: path to write out\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("h2",{id:"tomlhandler-objects"},"TOMLHandler Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class TOMLHandler(Handler)\n")),(0,l.kt)("p",null,"TOML class for loading TOML config files"),(0,l.kt)("p",null,"Base TOML class"),(0,l.kt)("h4",{id:"_load-2"},"_","load"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _load(path: str) -> typing.Dict\n")),(0,l.kt)("p",null,"TOML load function"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("p",null,"path: path to TOML file"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"base_payload")," - dictionary of read file")),(0,l.kt)("h4",{id:"_save-2"},"_","save"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _save(out_dict: typing.Dict, info_dict: typing.Optional[typing.Dict], path: str)\n")),(0,l.kt)("p",null,"Write function for TOML type"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"out_dict: payload to write\ninfo_dict: info payload to write\npath: path to write out\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"),(0,l.kt)("h2",{id:"jsonhandler-objects"},"JSONHandler Objects"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class JSONHandler(Handler)\n")),(0,l.kt)("p",null,"JSON class for loading JSON config files"),(0,l.kt)("p",null,"Base JSON class"),(0,l.kt)("h4",{id:"_load-3"},"_","load"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _load(path: str) -> typing.Dict\n")),(0,l.kt)("p",null,"JSON load function"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("p",null,"path: path to JSON file"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"base_payload")," - dictionary of read file")),(0,l.kt)("h4",{id:"_save-3"},"_","save"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def _save(out_dict: typing.Dict, info_dict: typing.Optional[typing.Dict], path: str)\n")),(0,l.kt)("p",null,"Write function for JSON type"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Args"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"out_dict: payload to write\ninfo_dict: info payload to write\npath: path to write out\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Returns"),":"))}u.isMDXComponent=!0}}]);