"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[7437],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=a,m=d["".concat(i,".").concat(f)]||d[f]||l[f]||c;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<c;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6957:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),c=(n(7294),n(3905)),o=["components"],s={sidebar_label:"tuner",title:"addons.tune.tuner"},i=void 0,p={unversionedId:"reference/addons/tune/tuner",id:"reference/addons/tune/tuner",isDocsHomePage:!1,title:"addons.tune.tuner",description:"Handles the tuner interface interface",source:"@site/docs/reference/addons/tune/tuner.md",sourceDirName:"reference/addons/tune",slug:"/reference/addons/tune/tuner",permalink:"/reference/addons/tune/tuner",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/addons/tune/tuner.md",tags:[],version:"current",frontMatter:{sidebar_label:"tuner",title:"addons.tune.tuner"},sidebar:"api",previous:{title:"payload",permalink:"/reference/addons/tune/payload"},next:{title:"args",permalink:"/reference/args"}},u=[{value:"TunerInterface Objects",id:"tunerinterface-objects",children:[]}],l={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,c.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"Handles the tuner interface interface"),(0,c.kt)("h2",{id:"tunerinterface-objects"},"TunerInterface Objects"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"class TunerInterface()\n")),(0,c.kt)("p",null,"Handles the general tuner interface by creating the necessary underlying tuner class and dispatches necessary\nops to the class instance"),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Attributes"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"_fixed_namespace: fixed parameter namespace used for combination with a sample draw\n_lib_interface: class instance of the underlying hyper-parameter library\n")),(0,c.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(tuner_config: Union[OptunaTunerConfig, AxTunerConfig], tuner_namespace: Spockspace, fixed_namespace: Spockspace)\n")),(0,c.kt)("p",null,"Init call to the TunerInterface"),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Args"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"tuner_config: necessary object to determine the interface and sample correctly from the underlying library\ntuner_namespace: tuner namespace that has attr classes that maps to an underlying library types\nfixed_namespace: namespace of fixed parameters\n")),(0,c.kt)("h4",{id:"sample"},"sample"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"def sample()\n")),(0,c.kt)("p",null,"Public interface to underlying library sepcific sample that returns a single sample/draw from the\nhyper-parameter sets (e.g. ranges, choices) and combines them with the fixed parameters into a single Spockspace"),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"Returns"),":"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Spockspace of drawn sample of hyper-parameters and fixed parameters\n")),(0,c.kt)("h4",{id:"tuner_status"},"tuner","_","status"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef tuner_status()\n")),(0,c.kt)("p",null,"Returns a dictionary of all the necessary underlying tuner internals to report the result"),(0,c.kt)("h4",{id:"best"},"best"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef best()\n")),(0,c.kt)("p",null,"Returns a Spockspace of the best hyper-parameter config and the associated metric value"))}d.isMDXComponent=!0}}]);