"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[874],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),i=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=i(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=i(n),f=a,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(m,l(l({ref:t},c),{},{components:n})):r.createElement(m,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5504:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return i},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],s={sidebar_label:"utils",title:"addons.s3.utils"},p=void 0,i={unversionedId:"reference/addons/s3/utils",id:"reference/addons/s3/utils",isDocsHomePage:!1,title:"addons.s3.utils",description:"Handles all S3 related ops -- allows for s3 functionality to be optional to keep req deps light",source:"@site/docs/reference/addons/s3/utils.md",sourceDirName:"reference/addons/s3",slug:"/reference/addons/s3/utils",permalink:"/reference/addons/s3/utils",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/addons/s3/utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"utils",title:"addons.s3.utils"},sidebar:"api",previous:{title:"configs",permalink:"/reference/addons/s3/configs"},next:{title:"ax",permalink:"/reference/addons/tune/ax"}},c=[],u={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Handles all S3 related ops -- allows for s3 functionality to be optional to keep req deps light"),(0,o.kt)("h4",{id:"handle_s3_load_path"},"handle","_","s3","_","load","_","path"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def handle_s3_load_path(path: str, s3_config: S3Config) -> str\n")),(0,o.kt)("p",null,"Handles loading from S3 uri"),(0,o.kt)("p",null,"Handles downloading file from a given s3 uri to a local temp location and passing the path back to the handler\nload call"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Args"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"path: s3 uri path\ns3_config: s3_config object\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Returns"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"temp_path: the temporary path of the config file downloaded from s3\n")),(0,o.kt)("h4",{id:"handle_s3_save_path"},"handle","_","s3","_","save","_","path"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def handle_s3_save_path(temp_path: str, s3_path: str, name: str, s3_config: S3Config)\n")),(0,o.kt)("p",null,"Handles saving to S3 uri"),(0,o.kt)("p",null,"Points to the local spock configuration file and handles getting it up to S3"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Args"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"temp_path: the temporary path the spock config was written out to locally\ns3_path: base s3 uri\nname: spock generated filename\ns3_config: s3_config object\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Returns"),":"),(0,o.kt)("h4",{id:"get_s3_bucket_object_name"},"get","_","s3","_","bucket","_","object","_","name"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_s3_bucket_object_name(s3_path: str) -> typing.Tuple[str, str, str]\n")),(0,o.kt)("p",null,"Splits a S3 uri into bucket, object, name"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Args"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"s3_path: s3 uri\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Returns"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"bucket\nobject\nname\n")),(0,o.kt)("h4",{id:"download_s3"},"download","_","s3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def download_s3(bucket: str, obj: str, temp_path: str, s3_session: BaseClient, download_config: S3DownloadConfig) -> str\n")),(0,o.kt)("p",null,"Attempts to download the file from the S3 uri to a temp location using any extra arguments to the download"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Args"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"bucket: s3 bucket\nobj: s3 object\ntemp_path: local temporary path to write file\ns3_session: current s3 session\ndownload_config: S3DownloadConfig with extra options for the file transfer\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Returns"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"temp_path: the temporary path of the config file downloaded from s3\n")),(0,o.kt)("h4",{id:"upload_s3"},"upload","_","s3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def upload_s3(bucket: str, obj: str, temp_path: str, s3_session: BaseClient, upload_config: S3UploadConfig)\n")),(0,o.kt)("p",null,"Attempts to upload the local file to the S3 uri using any extra arguments to the upload"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Args"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"bucket: s3 bucket\nobj: s3 object\ntemp_path: temporary path of the config file\ns3_session: current s3 session\nupload_config: S3UploadConfig with extra options for the file transfer\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Returns"),":"))}d.isMDXComponent=!0}}]);