"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[1559],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(f,r(r({ref:t},c),{},{components:n})):o.createElement(f,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<a;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4155:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var o=n(7462),i=n(3366),a=(n(7294),n(3905)),r=["components"],s={},l="Post Initialization Hooks",p={unversionedId:"advanced_features/Post-Hooks",id:"advanced_features/Post-Hooks",isDocsHomePage:!1,title:"Post Initialization Hooks",description:"spock supports post initialization (post-init) hooks via the post_hook method within a @spock decorated class.",source:"@site/docs/advanced_features/Post-Hooks.md",sourceDirName:"advanced_features",slug:"/advanced_features/Post-Hooks",permalink:"/spock/advanced_features/Post-Hooks",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/advanced_features/Post-Hooks.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Composing Configuration Files",permalink:"/spock/advanced_features/Composition"},next:{title:"Lazy Evaluation",permalink:"/spock/advanced_features/Lazy-Features"}},c=[{value:"Creating and Using Post-Init Hooks",id:"creating-and-using-post-init-hooks",children:[]},{value:"Common Post Initialization Hooks",id:"common-post-initialization-hooks",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"post-initialization-hooks"},"Post Initialization Hooks"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"spock")," supports post initialization (post-init) hooks via the ",(0,a.kt)("inlineCode",{parentName:"p"},"__post_hook__")," method within a ",(0,a.kt)("inlineCode",{parentName:"p"},"@spock")," decorated class.\nThese methods are automatically called after the ",(0,a.kt)("inlineCode",{parentName:"p"},"Spockspace")," object is created thus allow the user to do any post\ninstantiation work (such as validation)."),(0,a.kt)("h3",{id:"creating-and-using-post-init-hooks"},"Creating and Using Post-Init Hooks"),(0,a.kt)("p",null,"Simply add the ",(0,a.kt)("inlineCode",{parentName:"p"},"__post_hook__")," method to your ",(0,a.kt)("inlineCode",{parentName:"p"},"@spock")," decorated class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from spock import spock\nfrom spock.utils import within, ge\nfrom typing import List\n\n\ndef my_post_init_hook(list_vals: List[float], sum_val: float):\n    if sum(list_vals) != sum_val:\n        raise ValueError(f"Sum of `{sum(list_vals)}` does not equal 1.0")\n\n\n@spock\nclass PostInitExample:\n    list_vals: List[float] = [0.5, 0.25, 0.25]\n    check_sum: float = 1.0\n    my_value: float = 1.2\n    other: float = 0.1\n    lower_bound: float = 0.0\n    \n    def __post_hook__(self):\n        # Validate that value is between 0.0 and 1.0 (inclusive)\n        within(self.my_value, low_bound=0.0, upper_bound=1.0, inclusive_lower=True, inclusive_upper=True)\n        # Validate that other is greater than lower_bound\n        ge(self.other, bound=self.lower_bound)\n        my_post_init_hook(self.list_vals, self.check_sum)\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"__post_hook__")," method will be triggered post instantiation. Therefore, the example above will throw an ",(0,a.kt)("inlineCode",{parentName:"p"},"Exception"),"\nsince the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"my_value")," does not fall within the given bounds. Also notice that you can reference other defined\nparameters within the ",(0,a.kt)("inlineCode",{parentName:"p"},"__post_hook__")," methods and use them in custom functions (here we use ",(0,a.kt)("inlineCode",{parentName:"p"},"lower_bound")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"check_sum")," to do some validation comparisons)"),(0,a.kt)("h3",{id:"common-post-initialization-hooks"},"Common Post Initialization Hooks"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"spock")," provides some common validators (in the ",(0,a.kt)("inlineCode",{parentName:"p"},"utils")," module) that would be typically run as post-init\nhooks including: greater than (",(0,a.kt)("inlineCode",{parentName:"p"},"gt"),"), greater than or equals to (",(0,a.kt)("inlineCode",{parentName:"p"},"ge"),"), less than (",(0,a.kt)("inlineCode",{parentName:"p"},"lt"),"), less than or equals to (",(0,a.kt)("inlineCode",{parentName:"p"},"le"),"),\nand if a parameter falls within a set of inclusive/exclusive bounds (",(0,a.kt)("inlineCode",{parentName:"p"},"within"),")."))}d.isMDXComponent=!0}}]);