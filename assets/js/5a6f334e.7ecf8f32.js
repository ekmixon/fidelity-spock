"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[1230],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),f=s(n),d=a,m=f["".concat(o,".").concat(d)]||f[d]||u[d]||i;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=f;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5726:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return f}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],c={sidebar_label:"spaces",title:"backend.spaces"},o=void 0,s={unversionedId:"reference/backend/spaces",id:"reference/backend/spaces",isDocsHomePage:!1,title:"backend.spaces",description:"Handles classes/named tuples for holding class, field, and attribute value(s)",source:"@site/docs/reference/backend/spaces.md",sourceDirName:"reference/backend",slug:"/reference/backend/spaces",permalink:"/spock/reference/backend/spaces",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/reference/backend/spaces.md",tags:[],version:"current",frontMatter:{sidebar_label:"spaces",title:"backend.spaces"},sidebar:"api",previous:{title:"saver",permalink:"/spock/reference/backend/saver"},next:{title:"typed",permalink:"/spock/reference/backend/typed"}},p=[{value:"ConfigSpace Objects",id:"configspace-objects",children:[]},{value:"AttributeSpace Objects",id:"attributespace-objects",children:[]}],u={toc:p};function f(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Handles classes/named tuples for holding class, field, and attribute value(s)"),(0,i.kt)("h2",{id:"configspace-objects"},"ConfigSpace Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class ConfigSpace()\n")),(0,i.kt)("p",null,"Class that holds information about the final values of spock class attributes"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"spock_cls")," - reference to spock class to store information"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fields")," - dictionary of the current value of attributes")),(0,i.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(spock_cls: Type, fields: dict)\n")),(0,i.kt)("p",null,"Init call for ConfigSpace class"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"spock_cls")," - reference to spock class to store information"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fields")," - dictionary of the current value of attributes")),(0,i.kt)("h4",{id:"name"},"name"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef name() -> str\n")),(0,i.kt)("p",null,"Returns the name of the spock class associated with ConfigSpace"),(0,i.kt)("h2",{id:"attributespace-objects"},"AttributeSpace Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class AttributeSpace()\n")),(0,i.kt)("p",null,"Class that holds information about a single attribute that is mapped to a ConfigSpace"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"config_space")," - ConfigSpace that the attribute is contained in"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attribute")," - current Attribute class")),(0,i.kt)("h4",{id:"__init__-1"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(attribute: Type[Attribute], config_space: ConfigSpace)\n")),(0,i.kt)("p",null,"Init call for AttributeSpace class"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"config_space")," - ConfigSpace that the attribute is contained in"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attribute")," - current Attribute class")),(0,i.kt)("h4",{id:"field"},"field"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef field()\n")),(0,i.kt)("p",null,"Returns the field value from the ConfigSpace based on the attribute name"),(0,i.kt)("h4",{id:"field-1"},"field"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@field.setter\ndef field(value)\n")),(0,i.kt)("p",null,"Setter for the field value from the ConfigSpace based on the attribute name"))}f.isMDXComponent=!0}}]);