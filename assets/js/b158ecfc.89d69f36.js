"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[4890],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4757:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={},p="Tune Basics",l={unversionedId:"addons/tuner/Basics",id:"addons/tuner/Basics",isDocsHomePage:!1,title:"Tune Basics",description:"Just like the basic spock functionality, hyper-parameters are defined via a class based solution. All parameters",source:"@site/docs/addons/tuner/Basics.md",sourceDirName:"addons/tuner",slug:"/addons/tuner/Basics",permalink:"/spock/addons/tuner/Basics",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/addons/tuner/Basics.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Hyper-Parameter Tuning Support",permalink:"/spock/addons/tuner/About"},next:{title:"Ax Support",permalink:"/spock/addons/tuner/Ax"}},c=[{value:"Supported Hyper-Parameter Types",id:"supported-hyper-parameter-types",children:[]},{value:"Defining a spockTuner Class",id:"defining-a-spocktuner-class",children:[]},{value:"Creating a Configuration File",id:"creating-a-configuration-file",children:[]},{value:"Continuing",id:"continuing",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tune-basics"},"Tune Basics"),(0,i.kt)("p",null,"Just like the basic ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," functionality, hyper-parameters are defined via a class based solution. All parameters\nmust be defined in a class or multiple classes by decorating with the ",(0,i.kt)("inlineCode",{parentName:"p"},"@spockTuner")," decorator. Parameters are defined\nas one of the two basic types, ",(0,i.kt)("inlineCode",{parentName:"p"},"RangeHyperParameter")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ChoiceHyperParameter"),". "),(0,i.kt)("p",null,"Once built (with a specific backend), all parameters can be found within an automatically generated namespace\nobject that contains both the fixed and sampled parameters that can be accessed with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"@spock")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"@spockTuner")," class names."),(0,i.kt)("h3",{id:"supported-hyper-parameter-types"},"Supported Hyper-Parameter Types"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"spock")," supports the two following types for hyper-parameters, ",(0,i.kt)("inlineCode",{parentName:"p"},"RangeHyperParameter")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ChoiceHyperParameter"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"RangeHyperParameter")," type is used for hyper-parameters that are to be drawn from a sampled range of ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"float")," while the ",(0,i.kt)("inlineCode",{parentName:"p"},"ChoiceHyperParameter")," type is used for hyper-parameters that are to be sampled from a discrete set\nof values that can be of base type ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"float"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"bool"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"str"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"RangeHyperParameter")," requires the following inputs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"type: string of either int or float depending on the needed type"),(0,i.kt)("li",{parentName:"ul"},"bounds: a tuple of two values that define the lower and upper bound of the range (int or float)"),(0,i.kt)("li",{parentName:"ul"},"log_scale: boolean to activate log scaling of the range")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ChoiceHyperParameter")," requires the following inputs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"type: string of either int, float, bool, str depending on the needed type"),(0,i.kt)("li",{parentName:"ul"},"choices: a list of any length that contains the discrete values to sample from")),(0,i.kt)("h3",{id:"defining-a-spocktuner-class"},"Defining a spockTuner Class"),(0,i.kt)("p",null,"Let's start building out a very simple example (logistic regression of iris w/ sklearn) that we will continue to use\nwithin the tutorial: ",(0,i.kt)("inlineCode",{parentName:"p"},"tune.py")),(0,i.kt)("p",null,"Tune functions exactly the same as base ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," functionality. We import the basic units of functionality\nfrom ",(0,i.kt)("inlineCode",{parentName:"p"},"spock.addons.tune"),", define our class using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@spockTuner")," decorator, and define our parameters with\nsupported argument types. We also pull in the sample iris data from sklearn."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from spock.addons.tune import ChoiceHyperParameter\nfrom spock.addons.tune import RangeHyperParameter\nfrom spock.addons.tune import spockTuner\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\n\n@spockTuner\nclass LogisticRegressionHP:\n    c: RangeHyperParameter\n    solver: ChoiceHyperParameter\n\n# Load the iris data\nX, y = load_iris(return_X_y=True)\n\n# Split the Iris data\nX_train, X_valid, y_train, y_valid = train_test_split(X, y)\n\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@spockTuner")," decorated classes are passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"CSpockBuilder")," in the exact same way as basic ",(0,i.kt)("inlineCode",{parentName:"p"},"@spock"),"\ndecorated classes. This returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," builder object which can be used to call different methods."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from spock import SpockBuilder\n\nattrs_obj = SpockBuilder(\n    LogisticRegressionHP,\n    desc="Example Logistic Regression Hyper-Parameter Tuning",\n)\n')),(0,i.kt)("h3",{id:"creating-a-configuration-file"},"Creating a Configuration File"),(0,i.kt)("p",null,"Just like basic spock functionality, values in ",(0,i.kt)("inlineCode",{parentName:"p"},"spock")," are set primarily using external configuration files. For our\nhyper-parameters we just defined above our ",(0,i.kt)("inlineCode",{parentName:"p"},"tune.yaml")," file might look something like this (remember each class requires\nspecific inputs):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# Hyper-parameter config\nLogisticRegressionHP:\n  c:\n    bounds:\n    - 0.01\n    - 10.0\n    log_scale: true\n    type: float\n  solver:\n    choices:\n    - lbfgs\n    - saga\n    type: str\n")),(0,i.kt)("h3",{id:"continuing"},"Continuing"),(0,i.kt)("p",null,"The rest of the docs are backend specific so refer to the correct backend specific documentation."))}d.isMDXComponent=!0}}]);