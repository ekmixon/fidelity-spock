"use strict";(self.webpackChunkdocs_v_2=self.webpackChunkdocs_v_2||[]).push([[5343],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return f}});var s=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,s,o=function(e,n){if(null==e)return{};var t,s,o={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=s.createContext({}),c=function(e){var n=s.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},l=function(e){var n=c(e.components);return s.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},u=s.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(t),f=o,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||a;return t?s.createElement(m,r(r({ref:n},l),{},{components:t})):s.createElement(m,r({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var c=2;c<a;c++)r[c]=t[c];return s.createElement.apply(null,r)}return s.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3755:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return l},default:function(){return u}});var s=t(7462),o=t(3366),a=(t(7294),t(3905)),r=["components"],i={},p="Advanced Types",c={unversionedId:"advanced_features/Advanced-Types",id:"advanced_features/Advanced-Types",isDocsHomePage:!1,title:"Advanced Types",description:"spock also supports nested List or Tuple types and advanced argument types (such as repeated objects) that",source:"@site/docs/advanced_features/Advanced-Types.md",sourceDirName:"advanced_features",slug:"/advanced_features/Advanced-Types",permalink:"/advanced_features/Advanced-Types",editUrl:"https://github.com/fidelity/spock/edit/master/website/docs/advanced_features/Advanced-Types.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Inheritance",permalink:"/advanced_features/Inheritance"},next:{title:"Local Definitions",permalink:"/advanced_features/Local-Definitions"}},l=[{value:"Nested List/Tuple Types",id:"nested-listtuple-types",children:[]},{value:"Lists/Tuples of <code>Enum</code>",id:"liststuples-of-enum",children:[]},{value:"List/Tuple of Repeated <code>@spock</code> Classes",id:"listtuple-of-repeated-spock-classes",children:[]},{value:"<code>Enum</code> of <code>@spock</code> Classes",id:"enum-of-spock-classes",children:[]}],d={toc:l};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,a.kt)("wrapper",(0,s.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"advanced-types"},"Advanced Types"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"spock")," also supports nested ",(0,a.kt)("inlineCode",{parentName:"p"},"List")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Tuple")," types and advanced argument types (such as repeated objects) that\nuse ",(0,a.kt)("inlineCode",{parentName:"p"},"Enum")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"@spock")," decorated classes. All of the advanced types support the use of ",(0,a.kt)("inlineCode",{parentName:"p"},"Optional")," and setting default\nvalues. Example usage of advanced types can be found in the unittests\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/fidelity/spock/tree/master/tests"},"here"),"."),(0,a.kt)("h3",{id:"nested-listtuple-types"},"Nested List/Tuple Types"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"List[List[int]]")," -- Defines a list of list of integers."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"List[List[str]]")," -- Defines a list of list of strings."),(0,a.kt)("h3",{id:"liststuples-of-enum"},"Lists/Tuples of ",(0,a.kt)("inlineCode",{parentName:"h3"},"Enum")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from enum import Enum\nfrom spock.config import spock\nfrom typing import List\n\n\nclass StrChoice(Enum):\n    option_1 = 'option_1'\n    option_2 = 'option_2'\n\n@spock\nclass TypeConfig:\n    list_choice_p_str: List[StrChoice]\n")),(0,a.kt)("p",null,"With YAML definitions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"list_choice_p_str: ['option_1', 'option_2']\n")),(0,a.kt)("h3",{id:"listtuple-of-repeated-spock-classes"},"List/Tuple of Repeated ",(0,a.kt)("inlineCode",{parentName:"h3"},"@spock")," Classes"),(0,a.kt)("p",null,"These can be accessed by index and are iterable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from spock.config import spock\nfrom typing import List\n\n\n@spock\nclass NestedListStuff:\n    one: int\n    two: str\n\n@spock\nclass TypeConfig:\n    nested_list: List[NestedListStuff] # To Set Default Value append '= NestedListStuff'\n")),(0,a.kt)("p",null,"With YAML definitions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# Nested List configuration\nnested_list: NestedListStuff\nNestedListStuff:\n    - one: 10\n      two: hello\n    - one: 20\n      two: bye\n")),(0,a.kt)("h3",{id:"enum-of-spock-classes"},(0,a.kt)("inlineCode",{parentName:"h3"},"Enum")," of ",(0,a.kt)("inlineCode",{parentName:"h3"},"@spock")," Classes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from enum import Enum\nfrom spock.config import spock\n\n\n@spock\nclass ClassOne:\n    one: int\n    two: str\n\n\n@spock\nclass ClassTwo:\n    one: int\n    two: str\n\n\nclass ClassChoice(Enum):\n    class_one = ClassOne\n    class_two = ClassTwo\n\n@spock\nclass TypeConfig:\n    param: ClassChoice\n\n")),(0,a.kt)("p",null,"With YAML definitions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# Nested List configuration\nTypeConfig:\n  param: ClassTwo\n\nClassOne:\n    one: 20\n    two: bye\n\nClassTwo:\n    one: 10\n    two: hello\n\n")))}u.isMDXComponent=!0}}]);